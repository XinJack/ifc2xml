<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xbim.IO</name>
    </assembly>
    <members>
        <member name="P:Xbim.IO.Delta.TransactionLog.Changes">
            <summary>
            All new, changed or deleted entities except for these which were created and deleted in transaction
            </summary>
        </member>
        <member name="M:Xbim.IO.Delta.TransactionLog.#ctor(Xbim.Common.ITransaction)">
            <summary>
            Transaction log which listens to all changes within a transaction. 
            Thic constructor should always be used in 'using' statement so it releases reference to transaction.
            </summary>
            <param name="transaction">Transaction to be used as a scope of this log</param>
        </member>
        <member name="P:Xbim.IO.Delta.EntityChange.Entity">
            <summary>
            Entity which changes are described in this log entry
            </summary>
        </member>
        <member name="P:Xbim.IO.Delta.EntityChange.ChangeType">
            <summary>
            Prioritized log. Priorities are as follows: Deleted > New > Modified.
            This assumes that if entity is deleted at the end it is not very important what happened in the meantime.
            If it is new it is not that important if it was modified because full entity is interesting.
            Modifications are interesting in all other cases. Special case is entity which was created and deleted within a scope
            of one transaction but this should already be filtered out from the transaction log.
            </summary>
        </member>
        <member name="P:Xbim.IO.Delta.EntityChange.OriginalEntity">
            <summary>
            String representation of the entity before the first change was made to it. If this is a new entity this is empty string.
            </summary>
        </member>
        <member name="P:Xbim.IO.Delta.EntityChange.CurrentEntity">
            <summary>
            Current string representation of the entity. This is computed dynamically when you ask for 
            this so make sure not to ask for it after further modifications.
            </summary>
        </member>
        <member name="P:Xbim.IO.Delta.EntityChange.ChangedProperties">
            <summary>
            Changed properties within a scope of transaction. Current values are evaluated when you enumerate this property so
            make sure to ask for it before you do any further modifications. This property will return empty enumeration if 
            ChangeType is anything else than 'Modified'.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentGeometryInitialiser.UpdateReferenceCounts">
            <summary>
            Updates the reference counts for each grometry on completion
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentGeometryStoreReader.ShapeInstancesOfContext(System.Int32)">
            <summary>
            Retrieves all shape instances for the given context
            </summary>
            <param name="contextId"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.Esent.EsentGeometryStoreReader.ShapeInstances">
            <summary>
            Retrieves all shape instances
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.Esent.XbimSurfaceStyle">
            <summary>
            Represents a material used to render a surface of a geometry
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimSurfaceStyle.TagRenderMaterial">
            <summary>
            Holds the material used by the graphics engine to render the surface style
            Set to a value to suite  specific needs of the graphics environment being used
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.XbimSurfaceStyleMap.Styles">
            <summary>
            Returns all the  unique style in the map
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.XbimSurfaceStyleMap.GeometryHandles">
            <summary>
            Returns an enumerable of all handles in the map
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.XbimSurfaceStyleMap.GeometryHandlesForStyle(Xbim.IO.Esent.XbimSurfaceStyle)">
            <summary>
            Returns all the geometry handles for a specified style, use the Styles property for a valid style
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimDBAccess.Read">
            <summary>
            Opens the database for read only transactions
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimDBAccess.ReadWrite">
            <summary>
            Opens the database for readonly 
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimDBAccess.Exclusive">
            <summary>
            Opens the database exclusively, prevents access from any other processes.
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimGeometryHandle.GeometryLabel">
            <summary>
            The unique ID of the geometry
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimGeometryHandle.SurfaceStyleLabel">
            <summary>
            The label of the Ifc Entity that holds the surface style render
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimGeometryHandle.ProductLabel">
            <summary>
            The label of the Ifc Entity that the geomtry represents
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimGeometryHandle.ExpressTypeId">
            <summary>
            The id of the Ifc Type of the Product represented
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimGeometryHandle.GeometryType">
            <summary>
            The type of geometric representation
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimGeometryHandle.GeometryHashCode">
            <summary>
            The hash code of the geometry vertex data
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryHandle.#ctor(System.Int32,Xbim.Common.Geometry.XbimGeometryType,System.Int32,System.Int16,System.Int32,System.Nullable{System.Int32})">
            <summary>
            A handle to a geometry object
            </summary>
            <param name="geometryLabel">The unique ID of the geometry</param>
            <param name="geometryType">The type of geometric representation</param>
            <param name="productLabel">The label of the Ifc Entity that the geomtry represents</param>
            <param name="expressTypeId">The id of the Ifc Type of the Product represented</param>
            <param name="surfaceStyleLabel">The label of the Ifc Entity that holds the surface style render</param>
            <param name="geometryHashCode"></param>
        </member>
        <member name="P:Xbim.IO.Esent.XbimGeometryHandle.SurfaceStyle">
            <summary>
            Returns the surface style for rendering this object
            </summary>
        </member>
        <member name="T:Xbim.IO.Esent.XbimGeometryHandleCollection">
            <summary>
            An ordered Collection of geometry handles
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryHandleCollection.GetSurfaceStyles">
            <summary>
            Returns a list of unique surface style for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryHandleCollection.Exclude(System.Int32[])">
            <summary>
            Returns all handles that are not of type to exclude
            </summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryHandleCollection.Include(System.Int32[])">
            <summary>
            returns all handles that of of type to include
            </summary>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryHandleCollection.GetGeometryHandles(Xbim.IO.Esent.XbimSurfaceStyle)">
            <summary>
            Returns all the Geometry Handles for a specified SurfaceStyle
            Obtain the SurfaceStyle by calling the GetSurfaceStyles function
            </summary>
            <param name="forStyle"></param>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryHandleCollection.ToSurfaceStyleMap(System.Reflection.Module)">
            <summary>
            Returns a map of all the unique surface style and the geometry objects that the style renders
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.Esent.XbimInstanceCollection">
            <summary>
            A class providing access to a collection of in,stances in a model
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.XbimInstanceCollection.Count">
            <summary>
            Returns the total number of Ifc Instances in this model
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.CountOf``1">
            <summary>
            Returns the count of the number of instances of the specified type
            </summary>
            <typeparam name="TIfcType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.OfType``1(System.Boolean)">
            <summary>
            Returns all instances in the model of IfcType, IfcType may be an abstract Type
            </summary>
            <param name="activate">if true each instance is fullly populated from the database, if false population is deferred until the entity is activated</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.Where``1(System.Func{``0,System.Boolean})">
            <summary>
              Filters the Ifc Instances based on their Type and the predicate
            </summary>
            <typeparam name = "TIfcType">Ifc Type to filter</typeparam>
            <param name = "expression">function to execute</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.Handles">
            <summary>
            Returns an enumerabale of all the instance handles in the model
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.Handles``1">
            <summary>
            Returns an enumerable of all handles of the specified type in the model
            </summary>
            <typeparam name="T">The type of entity required</typeparam>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.Esent.XbimInstanceCollection.Item(System.Int32)">
            <summary>
            Returns an instance from the Model with the corresponding label
            </summary>
            <param name="label">entity label to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.GetFromGeometryLabel(System.Int32)">
            <summary>
            Returns the Ifc entity for a given Geometry Label
            </summary>
            <param name="geometryLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.New``1">
            <summary>
              Creates a new Ifc Persistent Instance, this is an undoable operation
            </summary>
            <typeparam name = "TIfcType"> The Ifc Type, this cannot be an abstract class. An exception will be thrown if the type is not a valid Ifc Type  </typeparam>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.New``1(System.Action{``0})">
            <summary>
              Creates and Instance of TIfcType and initializes the properties in accordance with the lambda expression
              i.e. Person person = CreateInstance&gt;Person&lt;(p =&lt; { p.FamilyName = "Undefined"; p.GivenName = "Joe"; });
            </summary>
            <typeparam name = "TIfcType"></typeparam>
            <param name = "initPropertiesFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.New(System.Type)">
            <summary>
            Creates and returns a new instance of Type t, sets the label to the specificed value.
            This is a reversabel operation
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.Contains(System.Int32)">
            <summary>
            Returns true if the instance label is in the current model, 
            Use with care, does not check that the instance is in the current model, only the label exists
            </summary>
            <param name="entityLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimInstanceCollection.Contains(Xbim.Common.IPersistEntity)">
            <summary>
            Returns true if the instance is in the current model
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.Esent.PersistedEntityInstanceCache.OpenInstances">
            <summary>
            Holds a collection of all currently opened instances in this process
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.PersistedEntityInstanceCache._lockObject">
            <summary>
            Holds the session and transaction state
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CreateDatabase(System.String)">
            <summary>
            Creates an empty xbim file, overwrites any existing file of the same name
            throw a create failed exception if unsuccessful
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetEntityTable">
            <summary>
            Returns a cached or new entity table, assumes the database filename has been specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetGeometryTable">
            <summary>
            Returns a cached or new Geometry Table, assumes the database filename has been specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.FreeTable(Xbim.IO.Esent.EsentEntityCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.FreeTable(Xbim.IO.Esent.XbimGeometryCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.FreeTable(Xbim.IO.Esent.EsentShapeGeometryCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.FreeTable(Xbim.IO.Esent.EsentShapeInstanceCursor)">
            <summary>
            Free a table. This will cache the table if the cache isn't full
            and dispose of it otherwise.
            </summary>
            <param name="table">The cursor to free.</param>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.Open(System.String,Xbim.IO.Esent.XbimDBAccess)">
            <summary>
             Opens an xbim model server file, exception is thrown if errors are encountered
            </summary>
            <param name="filename"></param>
            <param name="accessMode"></param>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.Close">
            <summary>
            Clears all contents from the cache and closes any connections
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a set of actions on a collection of entities inside a single read only transaction
            This improves database  performance for retrieving and accessing complex and deep objects
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="body"></param>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetXbimTempDirectory">
            <summary>
            Sets up the Esent directories, can only be call before the Init method of the instance
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.IsValidDirectory(System.String@)">
            <summary>
            Checks the directory is writeable and modifies to be the full path
            </summary>
            <param name="tempDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.ImportIfcXml(System.String,System.String,Xbim.Common.ReportProgressDelegate,System.Boolean,System.Boolean)">
            <summary>
              Imports an Xml file memory model into the model server, only call when the database instances table is empty
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.ImportStep(System.String,System.String,Xbim.Common.ReportProgressDelegate,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Imports the contents of the ifc file into the named database, the resulting database is closed after success, use LoadStep21 to access
            </summary>
            <param name="toImportIfcFilename"></param>
            <param name="progressHandler"></param>
            <param name="xbimDbName"></param>
            <param name="keepOpen"></param>
            <param name="cacheEntities"></param>
            <param name="codePageOverride"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.ImportStepZip(System.String,System.IO.Stream,Xbim.Common.ReportProgressDelegate,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Imports an Ifc Zip file
            </summary>
            <param name="xbimDbName"></param>
            <param name="fileStream"></param>
            <param name="progressHandler"></param>
            <param name="keepOpen"></param>
            <param name="cacheEntities"></param>
            <param name="codePageOverride"></param>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CountOf``1">
            <summary>
            returns the number of instances of the specified type and its sub types
            </summary>
            <typeparam name="TIfcType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CountOf(System.Type)">
            <summary>
            returns the number of instances of the specified type and its sub types
            </summary>
            <param name="theType"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.Esent.PersistedEntityInstanceCache.Count">
            <summary>
            returns the number of instances in the model
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.Esent.PersistedEntityInstanceCache.HighestLabel">
            <summary>
            returns the value of the highest current entity label
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CreateNew(System.Type)">
            <summary>
            Creates a new instance
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CreateNew(System.Type,System.Int32)">
            <summary>
            Creates a new instance, this is not a reversable action, and the instance is not cached
            It is for performance in import and export routines and should not be used in normal code
            </summary>
            <param name="type"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.InstancesOfTypeCount(System.Type)">
            <summary>
            Deprecated. Use CountOf, returns the number of instances of the specified type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.Esent.PersistedEntityInstanceCache.InstanceHandles">
            <summary>
            Returns an enumeration of handles to all instances in the database and in the cache
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.InstanceHandlesOfType``1">
            <summary>
            Returns an enumeration of handles to all instances in the database or the cache of specified type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetInstance(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns an instance of the entity with the specified label,
            if the instance has already been loaded it is returned from the cache
            if it has not been loaded a blank instance is loaded, i.e. will not have been activated
            </summary>
            <param name="label"></param>
            <param name="loadProperties"></param>
            <param name="unCached"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetOrCreateInstanceFromCache(System.Int32,System.Type,System.Byte[])">
            <summary>
            Looks for this instance in the cache and returns it, if not found it creates a new instance and adds it to the cache
            </summary>
            <param name="label">Entity label to create</param>
            <param name="type">If not null creates an instance of this type, else creates an unknown Ifc Type</param>
            <param name="properties">if not null populates all properties of the instance</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetInstanceFromStore(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Loads a blank instance from the database, do not call this before checking that the instance is in the instances cache
            If the entity has already been cached it will throw an exception
            This is not a undoable/reversable operation
            </summary>
            <param name="entityLabel">Must be a positive value of the label</param>
            <param name="loadProperties">if true the properties of the object are loaded  at the same time</param>
            <param name="unCached">if true the object is not cached, this is dangerous and can lead to object duplicates</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.OfType``1(System.Boolean,System.Nullable{System.Int32},Xbim.Common.Metadata.ExpressType)">
            <summary>
            Enumerates of all instances of the specified type. The values are cached, if activate is true all the properties of the entity are loaded
            </summary>
            <typeparam name="TOType"></typeparam>
            <param name="activate">if true loads the properties of the entity</param>
            <param name="indexKey">if the entity has a key object, optimises to search for this handle</param>
            <param name="overrideType">if specified this parameter overrides the expressType used internally (but not TIfcType) for filtering purposes</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetEntityBinaryData(Xbim.Common.IPersistEntity)">
            <summary>
            Gets the entities propertyData on binary stream
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.GetGeometryData(Xbim.Common.Geometry.XbimGeometryType)">
            <summary>
            Iterates over all the shape geoemtry
            This is a thread safe operation and can be accessed in background threads
            </summary>
            <param name="ofType"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.InsertNew(System.Type,System.Int32)">
            <summary>
            This function can only be called once the model is in a transaction
            </summary>
            <param name="type"></param>
            <param name="entityLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.InsertNew(System.Type)">
            <summary>
            This function can only be called once the model is in a transaction
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.AddModified(Xbim.Common.IPersistEntity)">
            <summary>
            Adds an entity to the modified cache, if the entity is not already being edited
            Throws an exception if an attempt is made to edit a duplicate reference to the entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Xbim.IO.Esent.PersistedEntityInstanceCache.InstanceLabels">
            <summary>
            Returns an enumeration of all the instance labels in the model
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.BeginCaching">
            <summary>
            Clears any cached objects and starts a new caching session
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.EndCaching">
            <summary>
            Clears any cached objects and terminates further caching
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.Write(Xbim.IO.Esent.EsentEntityCursor)">
            <summary>
            Writes the content of the modified cache to the table, assumes a transaction is in scope, modified and create new caches are cleared
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CacheStart">
            <summary>
            Starts a read cache
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CacheClear">
            <summary>
            Clears a read cache, do not call when a transaction is active
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.CacheStop">
            <summary>
            Clears a read cache, and ends further caching, do not call when a transaction is active
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.PersistedEntityInstanceCache.DeleteGeometry">
            <summary>
            Deletes the geometric content of the model.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="F:Xbim.IO.Esent.EsentCursor.Instance">
            <summary>
            The ESENT instance the cursor is opened against.
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentCursor.Sesid">
            <summary> 
            The ESENT session the cursor is using.
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentCursor.DbId">
            <summary>
            ID of the opened database.
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentCursor.Table">
            <summary>
            ID of the opened data table.
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentCursor.GlobalsTable">
            <summary>
            Global Table
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentCursor.CreateGlobalsTable(Microsoft.Isam.Esent.Interop.JET_SESID,Microsoft.Isam.Esent.Interop.JET_DBID)">
            <summary>
            Create the globals table.
            </summary>
            <param name="sesid">The session to use.</param>
            <param name="dbid">The database to create the table in.</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentCursor.BeginTransaction">
            <summary>
            Begin a new transaction for this cursor.
            </summary>
            <returns>The new transaction.</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentCursor.BeginReadOnlyTransaction">
            <summary>
            Begin a new transaction for this cursor. This is the cheapest
            transaction type because it returns a struct and no separate
            commit call has to be made.
            </summary>
            <returns>The new transaction.</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentCursor.Flush">
            <summary>
            Generate a null database update that we can wrap in a non-lazy transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.#ctor(Xbim.IO.Esent.EsentModel,System.String,Microsoft.Isam.Esent.Interop.OpenDatabaseGrbit)">
            <summary>
            Constructs a table and opens it
            </summary>
            <param name="instance"></param>
            <param name="database"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.SetEntityRowValues(System.Int32,System.Int16,System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Sets the values of the fields, no update is performed
            </summary>
            <param name="primaryKey">The label of the entity</param>
            <param name="type">The index of the type of the entity</param>
            <param name="data">The property data</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.SetEntityIndexRowValues(System.Int16,System.Int32,System.Int32)">
            <summary>
            Sets the values prior to update to write to the entity index table 
            </summary>
            <param name="primaryKey">The entity label</param>
            <param name="type">The Ifc Type ID</param>
            <param name="indexKey">The secondary key to index by</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.UpdateEntity(Xbim.Common.IPersistEntity)">
            <summary>
            Updates an entity, assumes a valid transaction is running
            </summary>
            <param name="toWrite"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.UpdateEntity(System.Int32,System.Int16,System.Collections.Generic.IEnumerable{System.Int32},System.Byte[],System.Nullable{System.Boolean})">
            <summary>
            Updates an entity, assumes a valid transaction is running
            </summary>
            <param name="currentLabel">Primary key/label</param>
            <param name="typeId">Type identifer</param>
            <param name="indexKeys">Search keys to use specifiy null if no indices</param>
            <param name="data">property data</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.AddEntity(Xbim.Common.IPersistEntity)">
            <summary>
            Adds an entity, assumes a valid transaction is running
            </summary>
            <param name="toWrite"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.AddEntity(System.Int32,System.Int16,System.Collections.Generic.IEnumerable{System.Int32},System.Byte[],System.Nullable{System.Boolean},System.Nullable{Xbim.IO.Esent.EsentLazyDBTransaction})">
            <summary>
            Adds an entity, assumes a valid transaction is running
            </summary>
            <param name="currentLabel">Primary key/label</param>
            <param name="typeId">Type identifer</param>
            <param name="indexKeys">Search keys to use specifiy null if no indices</param>
            <param name="data">property data</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.AddEntity(System.Type)">
            <summary>
            Create a new entity of the specified type, the entity will be blank, all properties with default values
            </summary>
            <param name="type">Type of entity to create, this must support IPersistEntity</param>
            <returns>A handle to the entity</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.AddEntity(System.Type,System.Int32)">
            <summary>
            Create a new entity of the specified type, the entity will be blank, all properties with default values
            The entity label will be as specified, an exception will be raised if the label is already in use
            </summary>
            <param name="type">Type of entity to create, this must support IPersistIfcEntity</param>
            <returns>A handle to the entity</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.TrySeekEntityLabel(System.Int32)">
            <summary>
            Returns true if the specified entity label is present in the table, assumes the current index has been set to by primary key (SetPrimaryIndex)
            </summary>
            <param name="key">The entity label to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.TrySeekEntityType(System.Int16,Xbim.Common.XbimInstanceHandle@)">
            <summary>
            Trys to move to the first entity of the specified type, assumes the current index has been set to order by type (SetOrderByType)
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.TrySeekEntityType(System.Int16,System.Int32,System.Int32)">
            <summary>
            Looks up an entity index to see if the secondary key exists
            </summary>
            <param name="typeId">The Ifc Type</param>
            <param name="key">The secondary key</param>
            <param name="currentLabel">The indexed entity label</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.TrySeekEntityType(System.Int16,Xbim.Common.XbimInstanceHandle@,System.Int32)">
            <summary>
            Trys to move to the first entity of the specified type, assumes the current index has been set to order by type (SetOrderByType)
            Secondary keys are specific to the type and defined as IfcAttributes in the class declaration
            </summary>
            <param name="typeId">the type of entity to look up</param>
            <param name="lookupKey">Secondary key on the search</param>
            <returns>Returns an instance handle to the first or an empty handle if not found</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.GetInstanceHandle">
            <summary>
            returns the instance handle for the object at the current cursor position. Assumes the index has been set to the correct position
            and the current index is SetOrderByType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.GetProperties">
            <summary>
            Gets the property values of the entity from the current record
            </summary>
            <returns>byte array of the property data in binary ifc format</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.RetrieveCount">
            <summary>
            Retrieve the count of entity items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of entity in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.GetIfcType">
            <summary>
            Returns the id of the current ifc type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.GetLabel">
            <summary>
            Returns the current enity label from the curos of the main entity table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.TryMoveNextEntityType(Xbim.Common.XbimInstanceHandle@)">
            <summary>
            For use only on the index table, accesses data from the index only
            </summary>
            <param name="ih"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.TryMoveFirstLabel(System.Int32@)">
            <summary>
            Iterates over the main entity table, access data from the index only
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentEntityCursor.TryMoveNextLabel(System.Int32@)">
            <summary>
            Iterates over the main entity table, access data from the index only
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryCursor.AddGeometry(System.Int32,Xbim.Common.Geometry.XbimGeometryType,System.Int16,System.Byte[],System.Byte[],System.Int16,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Adds a geometry record and returns the hash of the geometry data
            </summary>
            <param name="prodLabel"></param>
            <param name="type"></param>
            <param name="expressType"></param>
            <param name="transform"></param>
            <param name="shapeData"></param>
            <param name="subPart"></param>
            <param name="styleLabel"></param>
            <param name="geometryHash"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryCursor.RetrieveCount">
            <summary>
            Retrieve the count of geometry items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of geometry entities in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryCursor.UpdateReferenceCount(System.Int32,System.Int32)">
            <summary>
            Updates the number of references to a geomentry, a value of 1 indicates 1 reference in addition to one original use.
            A value of 0 means there is only the single use and no other references to this geometry
            </summary>
            <param name="geomLabel"></param>
            <param name="refCount"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.XbimGeometryCursor.GeometryData(Xbim.Common.Geometry.XbimGeometryType)">
            <summary>
            Returns the records for all geometries of the specified type
            </summary>
            <param name="xbimGeometryType"></param>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.Esent.EsentLazyDBTransaction">
            <summary>
            Used for wrapping a Database Lazy Transaction, if commit is not called the Dispose function rolls back the transaction
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentLazyDBTransaction._sesid">
            <summary>
            The session that has the transaction.
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentLazyDBTransaction._inTransaction">
            <summary>
            True if we are in a transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentLazyDBTransaction.#ctor(Microsoft.Isam.Esent.Interop.JET_SESID)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.IO.Esent.EsentLazyDBTransaction"/> struct.
            </summary>
            <param name="sesid">
            The sesid.
            </param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentLazyDBTransaction.Commit">
            <summary>
            Commit the transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentLazyDBTransaction.RollBack">
            <summary>
            Commit the transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentLazyDBTransaction.Dispose">
            <summary>
            Rollback the transaction if not already committed.
            </summary>
        </member>
        <member name="T:Xbim.IO.Esent.EsentModel">
            <summary>
            IModel implementation for Esent DB based model support
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.UserDefinedId">
            <summary>
            An identifier that an application can use to identify this model uniquely
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.ModelFactors">
            <summary>
            Model wide factors, precision etc.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.#ctor">
            <summary>
            Only inherited models can call parameter-less constructor and it is their responsibility to 
            call Init() as the very first thing.
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.CodePageOverride">
            <summary>
            Some applications do not comply with the standard and used the Windows code page for text. This property gives the possibility to override the character encoding when reading ifc.
            default value = -1 - by standard http://www.buildingsmart-tech.org/implementation/get-started/string-encoding/string-encoding-decoding-summary
            </summary>
            <example>
            model.CodePageOverride = Encoding.Default.WindowsCodePage;
            </example>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.Instances">
            <summary>
            Returns a collection of all instances only in the model 
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.FederatedInstances">
            <summary>
            Returns a collection of all instances in the model and all federated instances 
            </summary>
        </member>
        <member name="E:Xbim.IO.Esent.EsentModel.EntityNew">
            <summary>
            This event is fired every time new entity is created.
            </summary>
        </member>
        <member name="E:Xbim.IO.Esent.EsentModel.EntityModified">
            <summary>
            This event is fired every time any entity is modified. If your model is not
            transactional it might not be called at all as the central point for all
            modifications is a transaction.
            </summary>
        </member>
        <member name="E:Xbim.IO.Esent.EsentModel.EntityDeleted">
            <summary>
            This event is fired every time when entity gets deleted from model.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.GetGeometryTable">
            <summary>
            Starts a transaction to allow bulk updates on the geometry table, FreeGeometry Table should be called when no longer required
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.FreeTable(Xbim.IO.Esent.XbimGeometryCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.FreeTable(Xbim.IO.Esent.EsentEntityCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.FreeTable(Xbim.IO.Esent.EsentShapeGeometryCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.FreeTable(Xbim.IO.Esent.EsentShapeInstanceCursor)">
            <summary>
            Returns the table to the cache for reuse
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a set of actions on a collection of entities inside a single read only transaction
            This improves database  performance for retrieving and accessing complex and deep objects
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="body"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.Delete(Xbim.Common.IPersistEntity)">
            <summary>
            Registers an entity for deletion
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.GetInstanceVolatile(System.Int32)">
            <summary>
            Returns an instance from the Model with the corresponding label but does not keep a cache of it
            This is a dangerous call as duplicate instances of the same object could happen
            Ony use when interating over the whole database for export etc
            The properties of the object are also loaded to improve performance
            If the instance is in the cache it is returned
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.GeometriesCount">
            <summary>
            Returns the total number of Geometry objects in the model
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.CreateFrom(System.String,System.String,Xbim.Common.ReportProgressDelegate,System.Boolean,System.Boolean,System.Nullable{Xbim.IO.IfcStorageType})">
            <summary>
            Creates a new Model and populates with instances from the specified file, Ifc, IfcXML, IfcZip and Xbim are all supported.
            </summary>
            <param name="importFrom">Name of the file containing the instances to import</param>
            /// <param name="xbimDbName">Name of the xbim file that will be created. 
            If null the contents are loaded into memory and are not persistent
            </param>
            <param name="progDelegate"></param>
            <param name="keepOpen"></param>
            <param name="cacheEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.CreateTemporaryModel(Xbim.Common.IEntityFactory)">
            <summary>
            Creates an empty model using a temporary filename, the model will be deleted on close, unless SaveAs is called
            It will be returned open for read write operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.CreateModel(Xbim.Common.IEntityFactory,System.String,Xbim.IO.Esent.XbimDBAccess)">
            <summary>
             Creates and opens a new Xbim Database
            </summary>
            <param name="factory">Entity factory to be used for deserialization</param>
            <param name="dbFileName">Name of the Xbim file</param>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.Validate(System.IO.TextWriter,Xbim.Common.Enumerations.ValidationFlags)">
            <summary>
            Validates all entities in the model
            </summary>
            <param name="tw"></param>
            <param name="validateLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.Close">
            <summary>
            Closes the current model and releases all resources and instances
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.CacheStart">
            <summary>
            Begins a cache of all data read from the model, improves performance where data is read many times
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.CacheClear">
            <summary>
            Clears all read data in the cache
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.CacheStop">
            <summary>
            Stops further caching of data and clears the current cache
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.Open(System.String,Xbim.IO.Esent.XbimDBAccess,Xbim.Common.ReportProgressDelegate)">
            <summary>
            Opens an Xbim model only, to open Ifc, IfcZip and IfcXML files use the CreatFrom method
            </summary>
            <param name="fileName"></param>
            <param name="accessMode"></param>
            <param name="progDelegate"></param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.GetGeometryData(System.Int32,Xbim.Common.Geometry.XbimGeometryType)">
            <summary>
            Returns all the geometries for the geometry type
            Typically bounding box returns a single object, triangulated mesh mes may return multiple geometry meshes
            where an object is made of multiple materials
            </summary>
            <param name="productLabel"></param>
            <param name="geomType"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.GeometrySupportLevel">
            <summary>
            Returns the level of geometry supported in the model
            0 = No geometry has been compiled in the model
            1 = Triangulated Mesh only
            2 = Polygonal  geometry meshes supporting maps
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.InsertCopy``1(``0,Xbim.Common.XbimInstanceHandleMap,Xbim.IO.Esent.XbimReadWriteTransaction,System.Boolean)">
            <summary>
            Inserts a deep copy of the toCopy object into this model
            All property values are copied to the maximum depth
            Inverse properties are not copied
            </summary>
            <param name="toCopy">Instance to copy</param>
            <param name="mappings">Supply a dictionary of mappings if repeat copy insertions are to be made</param>
            <param name="txn"></param>
            <param name="includeInverses"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.InsertCopy``1(``0,Xbim.Common.XbimInstanceHandleMap,Xbim.Common.PropertyTranformDelegate,System.Boolean,System.Boolean)">
            <summary>
            Implementation of IModel variant of InsertCopy() function
            </summary>
            <typeparam name="T">Type of the object to be inserted. This must be a type supported by this model</typeparam>
            <param name="toCopy">Object to copy</param>
            <param name="mappings">Mappings make sure object is only inserted once. You should use one instance of mappings for all InsertCopy() calls between two models</param>
            <param name="propTransform">Delegate which can be used to transform properties. You can use this to filter out certain properties or referenced objects</param>
            <param name="includeInverses">If TRUE interse relations are also copied over. This may potentially bring over almost entire model if not controlled by propTransform delegate</param>
            <param name="keepLabels">If TRUE entity labels of inserted objects will be the same as the labels of original objects. This should be FALSE if you are inserting objects to existing model
            or if you are inserting objects from multiple source models into a single target model where entity labels may potentially clash.</param>
            <returns>New created object in this model which is a deep copy of original object</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentModel.EnsureGeometryTables">
            <summary>
            Invoke the function before meshing to ensure database structure is available
            </summary>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.Esent.EsentModel._transactionReference">
            <summary>
            Weak reference allows garbage collector to collect transaction once it goes out of the scope
            even if it is still referenced from model. This is important for the cases where the transaction
            is both not commited and not rolled back either.
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.IsFederation">
            <summary>
            Returns true if the model contains reference models or the model has extension xBIMf
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.AllInstancesHandles">
            <summary>
            Returns an enumerable of the handles to all entities in the model
            Note this includes entities that are in any federated models
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.EsentModel.InstanceHandles">
            <summary>
            Returns a list of the handles to only the entities in this model
            Note this do NOT include entities that are in any federated models
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.XbimParserState.InList">
            <summary>
            Returns true if the parser is working through a list of items
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentReadOnlyTransaction._sesid">
            <summary>
            The session that has the transaction.
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentReadOnlyTransaction.#ctor(Microsoft.Isam.Esent.Interop.JET_SESID)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.IO.Esent.EsentReadOnlyTransaction"/> struct.
            </summary>
            <param name="sesid">
            The sesid.
            </param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentReadOnlyTransaction.Dispose">
            <summary>
            Rollback the transaction if not already committed.
            </summary>
        </member>
        <member name="T:Xbim.IO.Esent.XbimReadTransaction">
            <summary>
            A transaction allowing read only operations on a model
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimReadTransaction._disposed">
            <summary>
            to detect redundant calls
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.XbimReadTransaction.InTransaction">
            <summary>
            True if we are in a transaction.
            </summary>
        </member>
        <member name="T:Xbim.IO.Esent.XbimReadWriteTransaction">
            <summary>
            A transaction allowing read and write operations on a model
            </summary>
        </member>
        <member name="P:Xbim.IO.Esent.XbimReadWriteTransaction.TransactionBatchSize">
            <summary>
            The maximum number of pulse actions before a transaction is automatically commited, default is 100 
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.XbimReadWriteTransaction.Pulse">
            <summary>
            Increments the pulse count for the transaction, if the pulse count exceed the Transaction batch size the transaction is committed and restarted
            </summary>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValShapeLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValIfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValGeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValCost">
            <summary>
            The total cost in bytes of this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValLOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValFormat">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValBoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValShapeData">
            <summary>
            The gemetry data defining the shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.GeometryTableName">
            <summary>
            shape geometry table name
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.geometryTablePrimaryIndex">
            <summary>
            Index on the unique label
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.geometryTableHashIndex">
            <summary>
            index on the geeometric hash
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.geometryTableReferenceIndex">
            <summary>
            Index on the reference count
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameShapeLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameIfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameShapeData">
            <summary>
            The gemetry data defining the shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameGeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameCost">
            <summary>
            The cost in bytes of this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameLOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameBoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor.colNameFormat">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeGeometryCursor._colValues">
            <summary>
            Holds all the table row values
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.RetrieveCount">
            <summary>
            Retrieve the count of geometry items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of geometry entities in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.TryMoveFirstShapeGeometry(Xbim.Common.Geometry.IXbimShapeGeometryData@)">
            <summary>
            Seeks and returns the first shape geometry
            </summary>
            <param name="sg"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.TryMoveNextShapeGeometry(Xbim.Common.Geometry.IXbimShapeGeometryData@)">
            <summary>
            Returns the next Shape geometry after a move or a seek call
            </summary>
            <param name="sg"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.TryGetShapeGeometry(System.Int32,Xbim.Common.Geometry.IXbimShapeGeometryData@)">
            <summary>
            Returns the shape geometry for the specified label if it exists
            </summary>
            <param name="shapeGeometryLabel"></param>
            <param name="sg"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.GetReferenceCount(System.Int32)">
            <summary>
            fast retrieval of the reference counf for this geometry
            </summary>
            <param name="shapeGeometryLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.TryMoveFirstReferenceCounter">
            <summary>
            Moves to the first Shape Geometry and sets the index to the reference counter index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.TryMoveNextReferenceCounter">
            <summary> Moves to the next shape geometry assumes TryMoveFirstReferenceCounter has been called
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.GetReferenceCount">
            <summary>
            returns the reference count for the current record, assume that TryMoveFirstReferenceCounter has been called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.GetCost">
            <summary>
            returns the cost for the current record, assume that TryMoveFirstReferenceCounter has been called
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeGeometryCursor.GetShapeGeometryLabel">
            <summary>
            returns the geometry label for the current record, assume that the current index has been set to primary
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xbim.IO.Esent.EsentShapeInstanceCursor">
            <summary>
            Provides a table of instantiations of shapes at specific tranformations
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValInstanceLabel">
            <summary>
            The unique label of this shape instanceData
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValIfcTypeId">
            <summary>
            The IFC type of the product this instanceData represents
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValIfcProductLabel">
            <summary>
            The label of the IFC Product object that  this instanceData fully or partly defines
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValStyleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValShapeLabel">
            <summary>
            The id of the shape  that this is an instanceData of
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValRepresentationContext">
            <summary>
            The label of the IFC representation context of this instanceData
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValRepType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValTransformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValBoundingBox">
            <summary>
            The bounding box of this instanceData, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.InstanceTableName">
            <summary>
            shape geometry table name
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.instanceTablePrimaryIndex">
            <summary>
            Index on the context, style, ifc type then instanceData label
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.productTypeIndex">
            <summary>
            Index on theifc type id
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.productIndex">
            <summary>
            index on the  product label
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.geometryShapeIndex">
            <summary>
            Index on the shape of the object
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameInstanceLabel">
            <summary>
            The unique label of this shape instanceData
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameIfcTypeId">
            <summary>
            The type ID of the IFC Product object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameIfcProductLabel">
            <summary>
            The label of the IFC Product object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameStyleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameShapeLabel">
            <summary>
            The id of the shape  that this is an instanceData of
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameRepresentationContext">
            <summary>
            The label of the IFC representation context of this instanceData
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameRepType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameTransformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor.colNameBoundingBox">
            <summary>
            The bounding box of this instanceData, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.IO.Esent.EsentShapeInstanceCursor._colValues">
            <summary>
            Holds all the table row values
            </summary>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.RetrieveCount">
            <summary>
            Retrieve the count of geometry items in the database from the globals table.
            </summary>
            <returns>The number of items in the database.</returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.UpdateCount(System.Int32)">
            <summary>
            Update the count of geometry entities in the globals table. This is done with EscrowUpdate
            so that there won't be any write conflicts.
            </summary>
            <param name="delta">The delta to apply to the count.</param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.AddInstance(System.Int32,System.Int32,System.Int32,System.Int16,System.Int32,Xbim.Common.Geometry.XbimGeometryRepresentationType,System.Byte[])">
            <summary>
            Adds a shape instanceData to the database table
            </summary>
            <param name="ctxtId"></param>
            <param name="shapeLabel"></param>
            <param name="typeId"></param>
            <param name="productLabel"></param>
            <param name="repType"></param>
            <param name="bounds"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TrySeekShapeInstance(System.Int32,Xbim.Common.Geometry.IXbimShapeInstanceData@)">
            <summary>
            xbimShapeInstanceData will contain the first shape instanceData in the specified context
            </summary>
            <param name="context"></param>
            <param name="si"></param>
            <param name="retrieveAll">if false only retrieve the key index data for speed, if true all data is returned</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TryMoveNextShapeInstance(Xbim.Common.Geometry.IXbimShapeInstanceData@)">
            <summary>
            Moves the cursor to the next shape instanceData that meets the criteria of the previous TrySeek call
            </summary>
            <param name="si"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TrySeekShapeInstanceOfProduct(System.Int32,Xbim.Common.Geometry.IXbimShapeInstanceData@)">
            <summary>
            xbimShapeInstanceData will contain the first shape instanceData of the specified product label
            </summary>
            <param name="product"></param>
            <param name="si"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TrySeekShapeInstanceOfProduct(System.Int32)">
            <summary>
            Return whether the product has any instances
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TrySeekShapeInstanceOfGeometry(System.Int32,Xbim.Common.Geometry.IXbimShapeInstanceData@)">
            <summary>
            xbimShapeInstanceData will contain the first shape instanceData of the specified product label
            </summary>
            <param name="context"></param>
            <param name="si"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TryMoveFirstSurfaceStyle(System.Int32,System.Int32@,System.Int16@)">
            <summary>
            Returns the first surface style in the specified context, -1 if no styles exists
            </summary>
            <param name="p"></param>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TryMoveNextSurfaceStyle(System.Int32@,System.Int16@)">
            <summary>
            Returns the next surface style in the specified context, assumes TryMoveFirstSurfaceStyle was the last call on this cursor
            </summary>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.SkipSurfaceStyes(System.Int32)">
            <summary>
            Skips all instances of skipstlye and returns in the next SurfaceStyle 
            </summary>
            <param name="skipStyle"></param>
            <param name="surfaceStyle"></param>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TryMoveFirstProductType(System.Int32,System.Int16@)">
            <summary>
            Returns the first product type in the specified context
            </summary>
            <param name="p"></param>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.IO.Esent.EsentShapeInstanceCursor.TryMoveNextProductType(System.Int16@)">
            <summary>
            Returns the next product type in the specified context, assumes TryMoveFirstSurfaceStyle was the last call on this cursor
            </summary>
            <param name="surfaceStyle"></param>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.ModelHelper.ReferingTypesCache">
            <summary>
            This only keeps cache of metadata and types to speed up reflection search.
            </summary>
        </member>
        <member name="M:Xbim.IO.ModelHelper.Delete(Xbim.Common.IModel,Xbim.Common.IPersistEntity,System.Func{Xbim.Common.IPersistEntity,System.Boolean})">
            <summary>
            This will delete the entity from model dictionary and also from any references in the model.
            Be carefull as this might take a while to check for all occurances of the object. Also make sure 
            you don't use this object anymore yourself because it won't get disposed until than. This operation
            doesn't guarantee that model is compliant with any kind of schema but it leaves it consistent. So if you
            serialize the model there won't be any references to the object which wouldn't be there.
            </summary>
            <param name="model">Model from which the entity should be deleted</param>
            <param name="entity">Entity to be deleted</param>
            <param name="instanceRemoval">Delegate to be used to remove entity from instance collection. 
            This should be reversable action within a transaction.</param>
        </member>
        <member name="M:Xbim.IO.ModelHelper.Replace``2(Xbim.Common.IModel,``0,``1,System.Func{Xbim.Common.IPersistEntity,System.Boolean})">
            <summary>
            This will replace the entity with another entity and will optionally remove it from model dictionary.
            This will replace all references in the model.
            Be carefull as this might take a while to check for all occurances of the object. 
            </summary>
            <param name="model">Model from which the entity should be deleted</param>
            <param name="entity">Entity to be replaces</param>
            <param name="replacement">Entity to replace first entity</param>
            <param name="instanceRemoval">Optional delegate to be used to remove entity from the instance collection.
            This should be reversable action within a transaction.</param>
        </member>
        <member name="M:Xbim.IO.ModelHelper.ReplaceReferences``2(Xbim.Common.IModel,``0,Xbim.IO.ModelHelper.ReferingType,``1)">
            <summary>
            Deletes references to specified entity from all entities in the model where entity is
            a references as an object or as a member of a collection.
            </summary>
            <param name="model">Model to be used</param>
            <param name="entity">Entity to be removed from references</param>
            <param name="referingType">Candidate type containing reference to the type of entity</param>
            <param name="replacement">New reference. If this is null it just removes references to entity</param>
        </member>
        <member name="T:Xbim.IO.ModelHelper.ReferingType">
            <summary>
            Helper structure to hold information for reference removal. If multiple objects of the same type are to
            be removed this will cache the information about where to have a look for the references.
            </summary>
        </member>
        <member name="M:Xbim.IO.ModelHelper.InsertCopy``1(Xbim.Common.IModel,``0,Xbim.Common.XbimInstanceHandleMap,Xbim.Common.PropertyTranformDelegate,System.Boolean,System.Boolean,System.Func{System.Type,System.Int32,Xbim.Common.IPersistEntity})">
            <summary>
            Inserts deep copy of an object into this model. The entity must originate from the same schema (the same EntityFactory). 
            This operation happens within a transaction which you have to handle yourself unless you set the parameter "noTransaction" to true.
            Insert will happen outside of transactional behaviour in that case. Resulting model is not guaranteed to be valid according to any
            model view definition. However, it is granted to be consistent. You can optionaly bring in all inverse relationships. Be carefull as it
            might easily bring in almost full model.
            
            </summary>
            <typeparam name="T">Type of the copied entity</typeparam>
            <param name="model">Model to be used as a target</param>
            <param name="toCopy">Entity to be copied</param>
            <param name="mappings">Mappings of previous inserts</param>
            <param name="includeInverses">Option if to bring in all inverse entities (enumerations in original entity)</param>
            <param name="keepLabels">Option if to keep entity labels the same</param>
            <param name="propTransform">Optional delegate which you can use to filter the content which will get coppied over.</param>
            <param name="getLabeledEntity">Functor to be used to create entity with specified label</param>
            <returns>Copy from this model</returns>
        </member>
        <member name="T:Xbim.IO.JSON.JSONWritter">
            <summary>
            You can use this writer to create JSON form of EXPRESS defined data. It implements abstract XmlWriter 
            so you can pass it as a writer to XbimXmlWriter4. As a result you will get JSON instead of XML.
            Result only contains text fields even for numeric values because of the way XML work. This might be
            extended in the future.
            </summary>
        </member>
        <member name="P:Xbim.IO.Memory.MemoryModel.Instances">
            <summary>
            Instance collection of all entities in the model. You can use this collection to create new
            entities or to query the model. This is the only way how to create new entities.
            </summary>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.TryDrop(Xbim.Common.IPersistEntity)">
            <summary>
            This function will try and release a persistent entity from the model, if the entity is referenced by another entity 
            it will stay in the model but can only be accessed via other entities,however if the model is saved and then reloaded 
            the entity will be restored to persisted status
            if the the entity is not referenced it will be garbage collected and removed and lost
            All entities that are directly referenced by this entity will also be made candidates to be dropped and dropped
            inverse references are not pursued
            Once dropped an entity cannot be accessed via the instances collection.
            Returns a collection of entities that have been dropped
            </summary>
            <param name="entity">the root entity to drop</param>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.Delete(Xbim.Common.IPersistEntity)">
            <summary>
            This will delete the entity from model dictionary and also from any references in the model.
            Be careful as this might take a while to check for all occurrences of the object. Also make sure 
            you don't use this object anymore yourself because it won't get disposed until than. This operation
            doesn't guarantee that model is compliant with any kind of schema but it leaves it consistent. So if you
            serialize the model there won't be any references to the object which wouldn't be there.
            </summary>
            <param name="entity">Entity to be deleted</param>
        </member>
        <member name="F:Xbim.IO.Memory.MemoryModel._transactionReference">
            <summary>
            Weak reference allows garbage collector to collect transaction once it goes out of the scope
            even if it is still referenced from model. This is important for the cases where the transaction
            is both not committed and not rolled back either.
            </summary>
        </member>
        <member name="E:Xbim.IO.Memory.MemoryModel.EntityNew">
            <summary>
            This event is fired every time new entity is created.
            </summary>
        </member>
        <member name="E:Xbim.IO.Memory.MemoryModel.EntityModified">
            <summary>
            This event is fired every time any entity is modified. If your model is not
            transactional it might not be called at all as the central point for all
            modifications is a transaction.
            </summary>
        </member>
        <member name="E:Xbim.IO.Memory.MemoryModel.EntityDeleted">
            <summary>
            This event is fired every time when entity gets deleted from model.
            </summary>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.LoadZip(System.IO.Stream,Xbim.Common.ReportProgressDelegate)">
            <summary>
            Loads the content of the model from ZIP archive. If the actual model file inside the archive is XML
            it is supposed to have an extension containing 'XML' like '.ifcxml', '.stpxml' or similar.
            </summary>
            <param name="stream">Input stream of the ZIP archive</param>
            <param name="progDelegate"></param>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.LoadStep21(System.IO.Stream,System.Int64,Xbim.Common.ReportProgressDelegate)">
            <summary>
            Opens the model from STEP21 file. 
            </summary>
            <param name="stream">Path to the file</param>
            <param name="streamSize"></param>
            <param name="progDelegate"></param>
            <returns>Number of errors in parsing. Always check this to be null or the model might be incomplete.</returns>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.LoadStep21(System.String,Xbim.Common.ReportProgressDelegate)">
            <summary>
            Opens the model from STEP21 file. 
            </summary>
            <param name="file">Path to the file</param>
            <param name="progDelegate"></param>
            <returns>Number of errors in parsing. Always check this to be null or the model might be incomplete.</returns>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.SaveAsStep21(System.IO.Stream,Xbim.Common.ReportProgressDelegate)">
            <summary>
            Saves the model as PART21 file
            </summary>
            <param name="stream">Stream to be used to write the file</param>
            <param name="progress"></param>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.SaveAsStep21(System.IO.TextWriter,Xbim.Common.ReportProgressDelegate)">
            <summary>
            Saves the model as PART21 file
            </summary>
            <param name="writer">Text writer to be used to write the file</param>
            <param name="progress"></param>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.InsertCopy``1(``0,Xbim.Common.XbimInstanceHandleMap,Xbim.Common.PropertyTranformDelegate,System.Boolean,System.Boolean)">
            <summary>
            Inserts deep copy of an object into this model. The entity must originate from the same schema (the same EntityFactory). 
            This operation happens within a transaction which you have to handle yourself unless you set the parameter "noTransaction" to true.
            Insert will happen outside of transactional behaviour in that case. Resulting model is not guaranteed to be valid according to any
            model view definition. However, it is granted to be consistent. You can optionally bring in all inverse relationships. Be careful as it
            might easily bring in almost full model.
            
            </summary>
            <typeparam name="T">Type of the copied entity</typeparam>
            <param name="toCopy">Entity to be copied</param>
            <param name="mappings">Mappings of previous inserts</param>
            <param name="includeInverses">Option if to bring in all inverse entities (enumerations in original entity)</param>
            <param name="keepLabels">Option if to keep entity labels the same</param>
            <param name="propTransform">Optional delegate which you can use to filter the content which will get copied over.</param>
            <returns>Copy from this model</returns>
        </member>
        <member name="M:Xbim.IO.Memory.MemoryModel.InsertCopy``1(``0,Xbim.Common.XbimInstanceHandleMap,Xbim.Common.PropertyTranformDelegate,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Inserts deep copy of an object into this model. The entity must originate from the same schema (the same EntityFactory). 
            This operation happens within a transaction which you have to handle yourself unless you set the parameter "noTransaction" to true.
            Insert will happen outside of transactional behaviour in that case. Resulting model is not guaranteed to be valid according to any
            model view definition. However, it is granted to be consistent. You can optionally bring in all inverse relationships. Be careful as it
            might easily bring in almost full model.
            
            </summary>
            <typeparam name="T">Type of the copied entity</typeparam>
            <param name="toCopy">Entity to be copied</param>
            <param name="mappings">Mappings of previous inserts</param>
            <param name="includeInverses">Option if to bring in all inverse entities (enumerations in original entity)</param>
            <param name="keepLabels">Option if to keep entity labels the same</param>
            <param name="propTransform">Optional delegate which you can use to filter the content which will get copied over.</param>
            <param name="noTransaction">If TRUE all operations inside this function will happen out of transaction. 
            Also no notifications will be fired from objects.</param>
            <returns>Copy from this model</returns>
        </member>
        <member name="P:Xbim.IO.Memory.MemoryModel.InstanceHandles">
            <summary>
            Returns a list of the handles to only the entities in this model
            Note this do NOT include entities that are in any federated models
            </summary>
        </member>
        <member name="T:Xbim.IO.Memory.TypeResolverDelegate">
            <summary>
            This delegate can be used to implement customized logic in type mapping.
            </summary>
            <param name="entity">Original entity</param>
            <returns>Express type which maps to the type of the original entity</returns>
        </member>
        <member name="P:Xbim.IO.Memory.Transaction.Modified">
            <summary>
            Returns all modified entities which are not added or deleted
            </summary>
        </member>
        <member name="P:Xbim.IO.Memory.Transaction.Added">
            <summary>
            All entities added as a new in this transaction
            </summary>
        </member>
        <member name="P:Xbim.IO.Memory.Transaction.Deleted">
            <summary>
            All deleted entities in this transaction
            </summary>
        </member>
        <member name="T:Xbim.IO.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xbim.IO.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xbim.IO.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xbim.IO.Properties.Resources.COBieExpress_config">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;!-- Copyright by: buildingSMART International Ltd, 1996-2013
            
            Any technical documentation made available by buildingSMART International Limited 
            is the copyrighted work of buildingSMART International Limited and is owned by the 
            buildingSMART International Limited. It may be photocopied, used in software development, 
            or translated into another computer language without prior written consent from 
            buildingSMART International Limited provided that full attributi [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Xbim.IO.Properties.Resources.IFC4_ADD1_config">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;cnf:configuration xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; id=&quot;IFC4&quot; xsi:schemaLocation=&quot;urn:iso:std:iso:10303:-28:ed-2:tech:XMLschema:configuration_language http://www.buildingsmart-tech.org/ifcXML/IFC4/P28/cnf.xsd&quot; xmlns:cnf=&quot;urn:iso:std:iso:10303:-28:ed-2:tech:XMLschema:configuration_language&quot;&gt;
              &lt;cnf:option 
                inheritance=&quot;true&quot; 
                concrete-attribute=&quot;attribute-content&quot; 
                naming-convention=&quot;preserve-case&quot; 
                generate-keys=&quot;false&quot; /&gt;
              &lt;cnf:schema targe [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Xbim.IO.Properties.Resources.IFC4_config">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;!-- Copyright by: buildingSMART International Ltd, 1996-2013
            
            Any technical documentation made available by buildingSMART International Limited 
            is the copyrighted work of buildingSMART International Limited and is owned by the 
            buildingSMART International Limited. It may be photocopied, used in software development, 
            or translated into another computer language without prior written consent from 
            buildingSMART International Limited provided that full attributi [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Xbim.IO.Step21.Parser.PropertyValue.NumberVal">
            <summary>
              Returns a double if the type parsed is any kind of number
            </summary>
        </member>
        <member name="P:Xbim.IO.Step21.Parser.StepP21Entity.ID">
            <summary>
              The identity number in the STEP P21 file
            </summary>
        </member>
        <member name="P:Xbim.IO.Step21.Parser.StepP21Entity.Name">
            <summary>
              The name of the Entity Class
            </summary>
        </member>
        <member name="P:Xbim.IO.Step21.Parser.StepP21Entity.Params">
            <summary>
              The unparsed string of parameters
            </summary>
        </member>
        <member name="P:Xbim.IO.Step21.Parser.StepP21Entity.Instance">
            <summary>
              The Ifc Model Instance
            </summary>
        </member>
        <member name="M:Xbim.IO.Step21.Parser.StepP21Entity.SetProperty(System.Object)">
            <summary>
              Sets the property at curent parseindex of the curent entity
            </summary>
        </member>
        <member name="M:Xbim.IO.Step21.StepGuidHelper.ConvertToBase64(System.Guid)">
            <summary>
              Returns the 22 character length base 64 ifc compliant string
            </summary>
        </member>
        <member name="M:Xbim.IO.Step21.StepGuidHelper.To64String(System.UInt32,System.Int32)">
            <summary>
              Helper function to convert from Guid to base 64 string
            </summary>
        </member>
        <member name="M:Xbim.IO.Step21.Part21Writer.Write(Xbim.Common.IModel,System.IO.TextWriter,Xbim.Common.Metadata.ExpressMetaData,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Writes full model into output writer as STEP21 file
            </summary>
            <param name="model">Model to be serialized</param>
            <param name="output">Output writer</param>
            <param name="metadata">Metadata to be used for serialization</param>
            <param name="map">Optional map can be used to map occurrences in the file</param>
        </member>
        <member name="M:Xbim.IO.Step21.Part21Writer.WriteHeader(Xbim.Common.Step21.IStepFileHeader,System.IO.TextWriter,System.String)">
            <summary>
            Writes STEP21 header to the output
            </summary>
            <param name="header">Header</param>
            <param name="output">Writer</param>
            <param name="overridingSchema">Schema to be written to the header instead of the schema defined in the header. 
            This is useful if the schema is not defined in the header.</param>
        </member>
        <member name="M:Xbim.IO.Step21.Part21Writer.WriteEntity(Xbim.Common.IPersistEntity,System.IO.TextWriter,Xbim.Common.Metadata.ExpressMetaData,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Writes the entity to a TextWriter in the Part21 format
            </summary>
            <param name="output">The TextWriter</param>
            <param name="entity">The entity to write</param>
            <param name="metadata"></param>
            <param name="map"></param>
        </member>
        <member name="M:Xbim.IO.Step21.Part21Writer.WriteProperty(System.Type,System.Object,System.IO.TextWriter,System.Collections.Generic.IDictionary{System.Int32,System.Int32},Xbim.Common.Metadata.ExpressMetaData)">
            <summary>
            Writes a property of an entity to the TextWriter in the Part21 format
            </summary>
            <param name="propType"></param>
            <param name="propVal"></param>
            <param name="output"></param>
            <param name="map"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Xbim.IO.Step21.Part21Writer.WriteValueType(System.Type,System.Object,System.IO.TextWriter)">
            <summary>
            Writes the value of a property to the TextWriter in the Part 21 format
            </summary>
            <param name="pInfoType"></param>
            <param name="pVal"></param>
            <param name="output"></param>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configuration.Serialize">
            <summary>
            Serializes current configuration object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configuration.Deserialize(System.String,Xbim.IO.Xml.BsConf.configuration@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an configuration object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output configuration object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configuration.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current configuration object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configuration.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.configuration@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an configuration object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output configuration object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.entity.Serialize">
            <summary>
            Serializes current entity object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.entity.Deserialize(System.String,Xbim.IO.Xml.BsConf.entity@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an entity object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output entity object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.entity.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current entity object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.entity.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.entity@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an entity object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output entity object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configurationInclude.Serialize">
            <summary>
            Serializes current configurationInclude object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configurationInclude.Deserialize(System.String,Xbim.IO.Xml.BsConf.configurationInclude@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an configurationInclude object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output configurationInclude object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configurationInclude.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current configurationInclude object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.configurationInclude.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.configurationInclude@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an configurationInclude object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output configurationInclude object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.attribute.Serialize">
            <summary>
            Serializes current attribute object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.attribute.Deserialize(System.String,Xbim.IO.Xml.BsConf.attribute@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an attribute object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output attribute object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.attribute.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current attribute object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.attribute.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.attribute@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an attribute object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output attribute object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.aggregate.Serialize">
            <summary>
            Serializes current aggregate object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.aggregate.Deserialize(System.String,Xbim.IO.Xml.BsConf.aggregate@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an aggregate object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output aggregate object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.aggregate.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current aggregate object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.aggregate.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.aggregate@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an aggregate object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output aggregate object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.content.unspecified">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.content.value">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.content.ref">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattribute.unspecified">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattribute.doubletag">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattribute.attributetag">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattribute.typetag">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattribute.notag">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattribute.notagsimple">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattribute.attributecontent">
            <remarks/>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.inverse.Serialize">
            <summary>
            Serializes current inverse object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.inverse.Deserialize(System.String,Xbim.IO.Xml.BsConf.inverse@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an inverse object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output inverse object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.inverse.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current inverse object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.inverse.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.inverse@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an inverse object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output inverse object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.exptype.unspecified">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.exptype.root">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.exptype.value">
            <remarks/>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.option.Serialize">
            <summary>
            Serializes current option object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.option.Deserialize(System.String,Xbim.IO.Xml.BsConf.option@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an option object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output option object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.option.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current option object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.option.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.option@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an option object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output option object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattributeglobal.doubletag">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattributeglobal.attributetag">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.expattributeglobal.attributecontent">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.namingconvention.initialupper">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.namingconvention.camelcase">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.namingconvention.preservecase">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.attributeType.inverse">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.attributeType.derive">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.attributeType.deriveinverse">
            <remarks/>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.rootEntity.Serialize">
            <summary>
            Serializes current rootEntity object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.rootEntity.Deserialize(System.String,Xbim.IO.Xml.BsConf.rootEntity@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an rootEntity object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output rootEntity object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.rootEntity.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current rootEntity object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.rootEntity.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.rootEntity@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an rootEntity object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output rootEntity object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.addAttribute.Serialize">
            <summary>
            Serializes current addAttribute object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.addAttribute.Deserialize(System.String,Xbim.IO.Xml.BsConf.addAttribute@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an addAttribute object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output addAttribute object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.addAttribute.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current addAttribute object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.addAttribute.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.addAttribute@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an addAttribute object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output addAttribute object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.addAttributeUsage.optional">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.addAttributeUsage.required">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.addAttributeUsage.fixed">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.addAttributeUsage.default">
            <remarks/>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.schema.Serialize">
            <summary>
            Serializes current schema object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.schema.Deserialize(System.String,Xbim.IO.Xml.BsConf.schema@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an schema object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output schema object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.schema.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current schema object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.schema.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.schema@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an schema object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output schema object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.additionalObject.Serialize">
            <summary>
            Serializes current additionalObject object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.additionalObject.Deserialize(System.String,Xbim.IO.Xml.BsConf.additionalObject@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an additionalObject object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output additionalObject object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.additionalObject.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current additionalObject object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.additionalObject.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.additionalObject@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an additionalObject object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output additionalObject object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.containerObject.Serialize">
            <summary>
            Serializes current containerObject object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.containerObject.Deserialize(System.String,Xbim.IO.Xml.BsConf.containerObject@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an containerObject object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output containerObject object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.containerObject.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current containerObject object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.containerObject.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.containerObject@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an containerObject object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output containerObject object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.include.Serialize">
            <summary>
            Serializes current include object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.include.Deserialize(System.String,Xbim.IO.Xml.BsConf.include@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an include object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output include object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.include.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current include object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.include.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.include@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an include object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output include object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.namespace.Serialize">
            <summary>
            Serializes current namespace object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.namespace.Deserialize(System.String,Xbim.IO.Xml.BsConf.namespace@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an namespace object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output namespace object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.namespace.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current namespace object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.namespace.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.namespace@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an namespace object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output namespace object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.qual.qualified">
            <remarks/>
        </member>
        <member name="F:Xbim.IO.Xml.BsConf.qual.unqualified">
            <remarks/>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.type.Serialize">
            <summary>
            Serializes current type object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.type.Deserialize(System.String,Xbim.IO.Xml.BsConf.type@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an type object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output type object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.type.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current type object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.type.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.type@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an type object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output type object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosElement.Serialize">
            <summary>
            Serializes current uosElement object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosElement.Deserialize(System.String,Xbim.IO.Xml.BsConf.uosElement@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an uosElement object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output uosElement object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosElement.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current uosElement object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosElement.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.uosElement@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an uosElement object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output uosElement object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosEntity.Serialize">
            <summary>
            Serializes current uosEntity object into an XML document
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosEntity.Deserialize(System.String,Xbim.IO.Xml.BsConf.uosEntity@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an uosEntity object
            </summary>
            <param name="xml">string workflow markup to deserialize</param>
            <param name="obj">Output uosEntity object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosEntity.SaveToFile(System.String,System.Exception@)">
            <summary>
            Serializes current uosEntity object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.BsConf.uosEntity.LoadFromFile(System.String,Xbim.IO.Xml.BsConf.uosEntity@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an uosEntity object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output uosEntity object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:Xbim.IO.Xml.XbimXmlReader4.#ctor(Xbim.IO.Xml.GetOrCreateEntity,Xbim.IO.Xml.FinishEntity,Xbim.Common.Metadata.ExpressMetaData)">
            <summary>
            Constructor of the reader for IFC2x3 XML. XSD is different for different versions of IFC and there is a major difference
            between IFC2x3 and IFC4 to there are two different classes to deal with this.
            </summary>x
            <param name="getOrCreate">Delegate which will be used to getOrCreate new entities</param>
            <param name="finish">Delegate which will be called once the entity is finished (no changes will be made to it)
            This is useful for a DB when this is the point when it can be serialized to DB</param>
            <param name="metadata">Metadata model used to inspect Express types and their properties</param>
        </member>
        <member name="P:Xbim.IO.Xml.XmlMetaProperty.AttributeSetter">
            <summary>
            Delegate to be used to serialize value as an XML attribute. This has to be called
            BEFORE any nested elements are created.
            </summary>
        </member>
        <member name="M:Xbim.IO.Xml.IfcXmlReader.#ctor(Xbim.IO.Xml.GetOrCreateEntity,Xbim.IO.Xml.FinishEntity,Xbim.Common.Metadata.ExpressMetaData)">
            <summary>
            Constructor of the reader for IFC2x3 XML. XSD is different for different versions of IFC and there is a major difference
            between IFC2x3 and IFC4 to there are two different classes to deal with this.
            </summary>x
            <param name="create">Delegate which will be used to create new entities</param>
            <param name="finish">Delegate which will be called once the entity is finished (no changes will be made to it)
            This is useful for a DB when this is the point when it can be serialized to DB</param>
            <param name="metadata">Metadata model used to inspect Express types and their properties</param>
        </member>
        <member name="M:Xbim.IO.Xml.XbimXmlWriter4.#ctor(Xbim.IO.Xml.BsConf.configuration,Xbim.IO.Xml.XbimXmlSettings)">
            <summary>
            Constructor of the XML writer. This writer implements conventions for IFC4 XML and needs to
            get configuration with speficic cases like inversed inverses and other special cases.
            Default settings and configuration are for IFC4 Add1. If you pass configuration and settings
            make sure both are for the same schema definition.
            </summary>
            <param name="configuration">XML to Express configuration</param>
            <param name="settings">Settings for writer like namespaces and root element name</param>
        </member>
        <member name="M:Xbim.IO.Xml.XbimXmlWriter4.Write(Xbim.Common.IModel,System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{Xbim.Common.IPersistEntity})">
            <summary>
            This function writes model entities to the defined XML output. 
            </summary>
            <param name="model">Model to be used for serialization. If no entities are specified IModel.Instances will be used as a 
            source of entities to be serialized.</param>
            <param name="output">Output XML</param>
            <param name="entities">Optional entities enumerable. If you define this enumerable it will be
            used instead of all entities from IModel.Instances. This allows to define different way of entities retrieval
            like volatile instances from persisted DB model</param>
        </member>
        <member name="M:Xbim.IO.Xml.IfcXmlWriter3.Write(Xbim.Common.IModel,System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{Xbim.Common.IPersistEntity})">
            <summary>
            This function writes model entities to the defined XML output. 
            </summary>
            <param name="model">Model to be used for serialization. If no entities are specified IModel.Instances will be used as a 
            source of entities to be serialized.</param>
            <param name="output">Output XML</param>
            <param name="entities">Optional entities enumerable. If you define this enumerable it will be
            used instead of all entities from IModel.Instances. This allows to define different way of entities retrieval
            like volatile instances from persisted DB model</param>
        </member>
        <member name="M:Xbim.IO.PersistEntityExtensions.WriteEntityToSteam(System.IO.MemoryStream,System.IO.BinaryWriter,Xbim.Common.IPersistEntity,Xbim.Common.Metadata.ExpressMetaData)">
            <summary>
              Writes the in memory data of the entity to a stream
            </summary>
            <param name = "entityStream"></param>
            <param name = "entityWriter"></param>
            <param name = "item"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Xbim.IO.PersistEntityExtensions.ReadEntityProperties(Xbim.Common.IPersistEntity,Xbim.IO.Esent.PersistedEntityInstanceCache,System.IO.BinaryReader,System.Boolean,System.Boolean)">
            <summary>
            Populates an entites properties from the binary stream
            </summary>
            <param name="entity"></param>
            <param name="cache"></param>
            <param name="br"></param>
            <param name="unCached">If true instances inside the properties are not added to the cache</param>
            <param name="fromCache"> If true the instance is read from the cache if not present it is created, used during parsing</param>
        </member>
        <member name="T:Xbim.IO.Parser.Scanner">
            <summary>
            Summary Canonical example of GPLEX automaton
            </summary>
        </member>
        <member name="P:Xbim.IO.Parser.Scanner.Buffer">
            <summary>
            The input buffer for this scanner.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.MkBuffCtx">
            <summary>
            This method creates a buffer context record from
            the current buffer object, together with some
            scanner state values. 
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.RestoreBuffCtx(Xbim.IO.Parser.Scanner.BufferContext)">
            <summary>
            This method restores the buffer value and allied
            scanner state from the given context record value.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.SetSource(System.String,System.Int32)">
            <summary>
            Create and initialize a StringBuff buffer object for this scanner
            </summary>
            <param name="source">the input string</param>
            <param name="offset">starting offset in the string</param>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.SetSource(System.Collections.Generic.IList{System.String})">
            <summary>
            Create and initialize a LineBuff buffer object for this scanner
            </summary>
            <param name="source">the list of input strings</param>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.SetSource(System.IO.Stream)">
            <summary>
            Create and initialize a StreamBuff buffer object for this scanner.
            StreamBuff is buffer for 8-bit byte files.
            </summary>
            <param name="source">the input byte stream</param>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner.yyless(System.Int32)">
            <summary>
            Discards all but the first "n" codepoints in the recognized pattern.
            Resets the buffer position so that only n codepoints have been consumed;
            yytext is also re-evaluated. 
            </summary>
            <param name="n">The number of codepoints to consume</param>
        </member>
        <member name="M:Xbim.IO.Parser.Scanner._yytrunc(System.Int32)">
            <summary>
            Removes the last "n" code points from the pattern.
            </summary>
            <param name="n">The number to remove</param>
        </member>
        <member name="P:Xbim.IO.Parser.Scanner.yyleng">
            <summary>
            The length of the pattern in codepoints (not the same as 
            string-length if the pattern contains any surrogate pairs).
            </summary>
        </member>
        <member name="T:Xbim.IO.Parser.StringBuffer">
            <summary>
            This class reads characters from a single string as
            required, for example, by Visual Studio language services
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.BuildBuffer.Mark">
            <summary>
            Marks a conservative lower bound for the buffer,
            allowing space to be reclaimed.  If an application 
            needs to call GetString at arbitrary past locations 
            in the input stream, Mark() is not called.
            </summary>
        </member>
        <member name="M:Xbim.IO.Parser.BuildBuffer.Read">
            <summary>
            Read returns the ordinal number of the next char, or 
            EOF (-1) for an end of stream.  Note that the next
            code point may require *two* calls of Read().
            </summary>
            <returns></returns>
        </member>
        <member name="F:Xbim.IO.IfcStorageType.Invalid">
            <summary>
            Invalid Xbim storage type
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcStorageType.IfcXml">
            <summary>
              IFC in XML format
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcStorageType.Ifc">
            <summary>
              Native IFC format
            </summary>
        </member>
        <member name="F:Xbim.IO.IfcStorageType.IfcZip">
            <summary>
              compressed IFC format
            </summary>           
        </member>
        <member name="T:QUT.Gppg.ShiftReduceParser`2">
            <summary>
            Abstract class for GPPG shift-reduce parsers.
            Parsers generated by GPPG derive from this base
            class, overriding the abstract Initialize() and
            DoAction() methods.
            </summary>
            <typeparam name="TValue">Semantic value type</typeparam>
            <typeparam name="TSpan">Location type</typeparam>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.Scanner">
            <summary>
            The abstract scanner for this parser.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.#ctor(QUT.Gppg.AbstractScanner{`0,`1})">
            <summary>
            Constructor for base class
            </summary>
            <param name="scanner">Scanner instance for this parser</param>
        </member>
        <member name="F:QUT.Gppg.ShiftReduceParser`2.CurrentSemanticValue">
            <summary>
            The current value of the "$$" symbolic variable in the parser
            </summary>
        </member>
        <member name="F:QUT.Gppg.ShiftReduceParser`2.CurrentLocationSpan">
            <summary>
            The current value of the "@$" symbolic variable in the parser
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.ValueStack">
            <summary>
            The stack of semantic value (YYSTYPE) values.
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.LocationStack">
            <summary>
            The stack of location value (YYLTYPE) values.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitRules(QUT.Gppg.Rule[])">
            <summary>
            Initialization method to allow derived classes
            to insert the rule list into this base class.
            </summary>
            <param name="rules">The array of Rule objects</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitStates(QUT.Gppg.State[])">
            <summary>
            Initialization method to allow derived classes to
            insert the states table into this base class.
            </summary>
            <param name="states">The pre-initialized states table</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitStateTable(System.Int32)">
            <summary>
            OBSOLETE FOR VERSION 1.4.0
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitSpecialTokens(System.Int32,System.Int32)">
            <summary>
            Initialization method to allow derived classes
            to insert the special value for the error and EOF tokens.
            </summary>
            <param name="err">The error state ordinal</param>
            <param name="end">The EOF stat ordinal</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.InitNonTerminals(System.String[])">
            <summary>
            Initialization method to allow derived classes to
            insert the non-terminal symbol names into this base class.
            </summary>
            <param name="names">Non-terminal symbol names</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYAccept">
            <summary>
            Force parser to terminate, returning "true"
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYAbort">
            <summary>
            Force parser to terminate, returning "false"
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.YYError">
            <summary>
            Force parser to terminate, returning
            "false" if error recovery fails.
            </summary>
        </member>
        <member name="P:QUT.Gppg.ShiftReduceParser`2.YYRecovering">
            <summary>
            Check if parser in error recovery state.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.Initialize">
            <summary>
            Abstract base method. ShiftReduceParser calls this
            to initialize the base class data structures.  Concrete
            parser classes must override this method.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.Parse">
            <summary>
            Main entry point of the Shift-Reduce Parser.
            </summary>
            <returns>True if parse succeeds, else false for
            unrecoverable errors</returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.DoAction(System.Int32)">
            <summary>
            Execute the selected action from array.
            Must be overriden in derived classes.
            </summary>
            <param name="actionNumber">Index of the action to perform</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.yyclearin">
            <summary>
            Traditional YACC method.  Discards the next input token.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.yyerrok">
            <summary>
            Tradional YACC method. Clear the "recovering" flag.
            </summary>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.AddState(System.Int32,QUT.Gppg.State)">
            <summary>
            OBSOLETE FOR VERSION 1.4.0
            Method used by derived types to insert new
            state instances in the "states" array.
            </summary>
            <param name="stateNumber">index of the state</param>
            <param name="state">data for the state</param>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.TerminalToString(System.Int32)">
            <summary>
            Abstract state class naming terminal symbols.
            This is overridden by derived classes with the
            name (or alias) to be used in error messages.
            </summary>
            <param name="terminal">The terminal ordinal</param>
            <returns></returns>
        </member>
        <member name="M:QUT.Gppg.ShiftReduceParser`2.CharToString(System.Char)">
            <summary>
            Return text representation of argument character
            </summary>
            <param name="input">The character to convert</param>
            <returns>String representation of the character</returns>
        </member>
        <member name="T:QUT.Gppg.IMerge`1">
            <summary>
            Classes implementing this interface must supply a
            method that merges two location objects to return
            a new object of the same type.
            GPPG-generated parsers have the default location
            action equivalent to "@$ = @1.Merge(@N);" where N
            is the right-hand-side length of the production.
            </summary>
            <typeparam name="TSpan">The Location type</typeparam>
        </member>
        <member name="M:QUT.Gppg.IMerge`1.Merge(`0)">
            <summary>
            Interface method that creates a location object from
            the current and last object.  Typically used to create
            a location object extending from the start of the @1
            object to the end of the @N object.
            </summary>
            <param name="last">The lexically last object to merge</param>
            <returns>The merged location object</returns>
        </member>
        <member name="T:QUT.Gppg.LexLocation">
            <summary>
            This is the default class that carries location
            information from the scanner to the parser.
            If you don't declare "%YYLTYPE Foo" the parser
            will expect to deal with this type.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.StartLine">
            <summary>
            The line at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.StartColumn">
            <summary>
            The column at which the text span starts.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.EndLine">
            <summary>
            The line on which the text span ends.
            </summary>
        </member>
        <member name="P:QUT.Gppg.LexLocation.EndColumn">
            <summary>
            The column of the first character
            beyond the end of the text span.
            </summary>
        </member>
        <member name="M:QUT.Gppg.LexLocation.#ctor">
            <summary>
            Default no-arg constructor.
            </summary>
        </member>
        <member name="M:QUT.Gppg.LexLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for text-span with given start and end.
            </summary>
            <param name="sl">start line</param>
            <param name="sc">start column</param>
            <param name="el">end line </param>
            <param name="ec">end column</param>
        </member>
        <member name="M:QUT.Gppg.LexLocation.Merge(QUT.Gppg.LexLocation)">
            <summary>
            Create a text location which spans from the 
            start of "this" to the end of the argument "last"
            </summary>
            <param name="last">The last location in the result span</param>
            <returns>The merged span</returns>
        </member>
        <member name="T:QUT.Gppg.AbstractScanner`2">
            <summary>
            Abstract scanner class that GPPG expects its scanners to 
            extend.
            </summary>
            <typeparam name="TValue">Semantic value type YYSTYPE</typeparam>
            <typeparam name="TSpan">Source location type YYLTYPE</typeparam>
        </member>
        <member name="F:QUT.Gppg.AbstractScanner`2.yylval">
            <summary>
            Lexical value optionally set by the scanner. The value
            is of the %YYSTYPE type declared in the parser spec.
            </summary>
        </member>
        <member name="P:QUT.Gppg.AbstractScanner`2.yylloc">
            <summary>
            Current scanner location property. The value is of the
            type declared by %YYLTYPE in the parser specification.
            </summary>
        </member>
        <member name="M:QUT.Gppg.AbstractScanner`2.yylex">
            <summary>
            Main call point for LEX-like scanners.  Returns an int
            corresponding to the token recognized by the scanner.
            </summary>
            <returns>An int corresponding to the token</returns>
        </member>
        <member name="M:QUT.Gppg.AbstractScanner`2.yyerror(System.String,System.Object[])">
            <summary>
            Traditional error reporting provided by LEX-like scanners
            to their YACC-like clients.
            </summary>
            <param name="format">Message format string</param>
            <param name="args">Optional array of args</param>
        </member>
        <member name="T:QUT.Gppg.State">
            <summary>
            Encapsulated state for the parser.
            Opaque to users, visible to the tool-generated code.
            </summary>
        </member>
        <member name="F:QUT.Gppg.State.number">
            <summary>
            The index of this state in the states array.
            </summary>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32[],System.Int32[])">
            <summary>
            State transition data for this state. Pairs of elements of the 
            goto array associate symbol ordinals with next state indices.
            The actions array is passed to another constructor. 
            </summary>
            <param name="actions">The action list</param>c
            <param name="goToList">Next state data</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32[])">
            <summary>
            Action data for this state. Pairs of elements of the 
            action array associate action ordinals with each of
            those symbols that have actions in the current state.
            </summary>
            <param name="actions">The action array</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32)">
            <summary>
            Set the default action for this state.
            </summary>
            <param name="defaultAction">Ordinal of the default action</param>
        </member>
        <member name="M:QUT.Gppg.State.#ctor(System.Int32,System.Int32[])">
            <summary>
            Set the default action and the state transition table.
            </summary>
            <param name="defaultAction">The default action</param>
            <param name="goToList">Transitions from this state</param>
        </member>
        <member name="T:QUT.Gppg.Rule">
            <summary>
            Rule representation at runtime.
            </summary>
        </member>
        <member name="M:QUT.Gppg.Rule.#ctor(System.Int32,System.Int32[])">
            <summary>
            Rule constructor.  This holds the ordinal of
            the left hand side symbol, and the list of
            right hand side symbols, in lexical order.
            </summary>
            <param name="left">The LHS non-terminal</param>
            <param name="right">The RHS symbols, in lexical order</param>
        </member>
        <member name="T:QUT.Gppg.PushdownPrefixState`1">
            <summary>
            Stack utility for the shift-reduce parser.
            GPPG parsers have three instances:
            (1) The parser state stack, T = QUT.Gppg.State,
            (2) The semantic value stack, T = TValue,
            (3) The location stack, T = TSpan.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:QUT.Gppg.PushdownPrefixState`1.Item(System.Int32)">
            <summary>
            Indexer for values of the stack below the top.
            </summary>
            <param name="index">index of the element, starting from the bottom</param>
            <returns>the selected element</returns>
        </member>
        <member name="P:QUT.Gppg.PushdownPrefixState`1.Depth">
            <summary>
            The current depth of the stack.
            </summary>
        </member>
    </members>
</doc>
