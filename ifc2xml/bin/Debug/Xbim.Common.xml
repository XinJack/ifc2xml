<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xbim.Common</name>
    </assembly>
    <members>
        <member name="M:Xbim.Common.Collections.ItemSet`1.GetAt(System.Int32)">
            <summary>
            This function makes it possible to add nested lists if this is the case.
            It works like InsertAt is the object doesn't exist already. You cannot create lists with wholes.
            </summary>
            <param name="index">Index of the object</param>
            <returns>Object at specified index. If it is a nested list and it doesn't exist it gets created.</returns>
        </member>
        <member name="M:Xbim.Common.Exceptions.ExceptionExtensions.ErrorStack(System.Exception,System.String)">
            <summary>
              Returns a list of indented strings for each error in the exception
            </summary>
        </member>
        <member name="T:Xbim.Common.Exceptions.XbimException">
            <summary>
            Represents an error that occurred within the XBIM application
            </summary>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimException"/> class.
            </summary>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:Xbim.Common.Exceptions.XbimGeometryException">
            <summary>
            Represents an error that occurrs while processing geometry for a model file.
            </summary>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimGeometryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimGeometryException"/> class.
            </summary>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimGeometryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimGeometryException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimGeometryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimGeometryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:Xbim.Common.Exceptions.XbimParserException">
            <summary>
            Represents an error that occurrs while parsing a model file.
            </summary>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimParserException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimParserException"/> class.
            </summary>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimParserException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xbim.Common.Exceptions.XbimParserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Exceptions.XbimParserException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="P:Xbim.Common.Federation.FederatedModelInstances.Item(Xbim.Common.XbimInstanceHandle)">
            <summary>
            Returns the instance that corresponds to this handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.Federation.IReferencedModel.Identifier">
            <summary>
            Returns the unique identifier for this reference within the scope of the referencing model. 
            </summary>
        </member>
        <member name="P:Xbim.Common.Federation.IReferencedModel.Name">
            <summary>
            Mostly URI of the federated model so that when this is serialized it can be used to reopen the federation
            </summary>
        </member>
        <member name="P:Xbim.Common.Federation.IReferencedModel.Role">
            <summary>
            The role of the organisation that created this model, i.e. Architect, Engineer etc
            </summary>
        </member>
        <member name="P:Xbim.Common.Federation.IReferencedModel.OwningOrganisation">
            <summary>
            The name of the organisation that created and owns this model
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimSurface.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IGeometryStoreReader.ShapeInstances">
            <summary>
            Returns an enumerable of all the shape instances in the store
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreReader.ShapeInstancesOfContext(System.Int32)">
            <summary>
            Returns an enumerable of all the shape instances in the store with the specified context Id
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IGeometryStoreReader.ShapeGeometries">
            <summary>
            Returns an enumerable of all the shape geometries in the store
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreReader.ShapeGeometry(System.Int32)">
            <summary>
            Returns the shape geometry of the specifed geometry Id
            </summary>
            <param name="shapeGeometryLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreReader.ShapeGeometryOfInstance(Xbim.Common.Geometry.XbimShapeInstance)">
            <summary>
            Returns the geometry of the specified instance
            </summary>
            <param name="shapeInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreReader.ShapeInstancesOfEntity(Xbim.Common.IPersistEntity)">
            <summary>
            Returns an enumerable of all the shape instances in the store for the specified entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreReader.ShapeInstancesOfStyle(System.Int32)">
            <summary>
            Returns an enumerable of all the shape instances in the store for the specified style
            </summary>
            <param name="styleLabel">The identifier of the required style</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreReader.ShapeInstancesOfGeometry(System.Int32)">
            <summary>
            Returns an enumerable of all the shape instances in the store with the specified geometry
            </summary>
            <param name="geometryLabel"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.Geometry.IGeometryStoreReader.StyleIds">
            <summary>
            Returns a unique set of all the style IDs of the all the shape instances in the store       
            </summary>
            <param name="??"></param>
            <returns></returns>        
        </member>
        <member name="P:Xbim.Common.Geometry.IGeometryStoreReader.ContextRegions">
            <summary>
            Returns the region collection for the store
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IGeometryStoreReader.ContextIds">
            <summary>
            Returns an eumerable of all the unique context ids in the store
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimDimensionalExponents.LengthExponent">
            <summary>
              The power of the length base quantity.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimDimensionalExponents.MassExponent">
            <summary>
              The power of the mass base quantity.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimDimensionalExponents.TimeExponent">
            <summary>
              The power of the time base quantity.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimDimensionalExponents.ElectricCurrentExponent">
            <summary>
              The power of the electric current base quantity.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimDimensionalExponents.ThermodynamicTemperatureExponent">
            <summary>
              The power of the thermodynamic temperature base quantity.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimDimensionalExponents.AmountOfSubstanceExponent">
            <summary>
              The power of the amount of substance base quantity.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimDimensionalExponents.LuminousIntensityExponent">
            <summary>
              The power of the luminous longensity base quantity.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.ShapeLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.IfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.GeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.Cost">
            <summary>
            The cost of this shape in bytes
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.ReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.LOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.Format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.BoundingBox">
            <summary>
            The bounding box of this instance in world coordinates, it has been transformed to the correct location
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.ShapeDataCompressed">
            <summary>
            The geometry data defining the shape in zip compression
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeGeometryData.ShapeData">
            <summary>
            The geometry data defining the shape in  uncompressed format
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.InstanceLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.IfcTypeId">
            <summary>
            The IFC type of the product this instance represents
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.IfcProductLabel">
            <summary>
            The label of the IFC Product object that  this instance fully or partly defines
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.StyleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.ShapeGeometryLabel">
            <summary>
            The id of the shape geometry  that this is an instance of
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.RepresentationContext">
            <summary>
            The label of the IFC representation context of this instance
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.RepresentationType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.Transformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShapeInstanceData.BoundingBox">
            <summary>
            The bounding box of this instance, does not require tranformation to place in world coordinates
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStore.BeginInit">
            <summary>
            Clears the store of any existing geometries and prepares for an update
            </summary>
            <returns>A Transaction for bulk addition of geometries, prevents update by other processes, if null an Initialisation is in process already or the owning model is not available for write operations </returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStore.BeginRead">
            <summary>
            Returns a reader for accessing geometry in the store, nb this is a disposable and should be used in using{} context
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreInitialiser.AddShapeGeometry(Xbim.Common.Geometry.XbimShapeGeometry)">
            <summary>
            Adds a shape geometry to the store under transaction
            </summary>
            <param name="shapeGeometry"></param>
            <returns>Returns the ID of the shape geometry</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreInitialiser.AddShapeInstance(Xbim.Common.Geometry.XbimShapeInstance,System.Int32)">
            <summary>
            Adds a shape instance to the store under transaction
            </summary>
            <param name="shapeInstance">The shape instance data</param>
            <param name="geometryId">the Id of the geometry shape, must be obtained from AddShapeGeometry</param>
            <returns>return the Id of the shape instance</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreInitialiser.AddRegions(Xbim.Common.Geometry.XbimRegionCollection)">
            <summary>
            Adds a collection of geometric regions to the store, this groups geometries into major spatial collection areas 
            </summary>
            <param name="regions"></param>
            <returns>the unique Id of the region collection</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IGeometryStoreInitialiser.Commit">
            <summary>
            Finalises an initialisation and flushes all operations to the store, the transaction must have been obtained from BeginInit
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.XbimRegion">
            <summary>
            Used in the clustering analysis of elements the model.
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimRegionCollection.ContextLabel">
            <summary>
            The IFC label of the geometric represenation context this region represents
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometryHandle._contextHandle">
            <summary>
            The 3D model context that contains this shape geometry
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometryHandle._shapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometryHandle._referenceCount">
            <summary>
            The number of references to this shape geoemetry
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometryHandle.Context">
            <summary>
            The 3D model context that contains this shape geometry
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometryHandle.ShapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometryHandle.ReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.XbimShapeGeometry">
            <summary>
            A basic shape geoemetry, note this is independent of placement and not specific to any product
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometry._shapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometry._ifcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometry._geometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometry._referenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometry._format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometry._boundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeGeometry._shapeData">
            <summary>
            The geometry data defining the shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.ShapeLabel">
            <summary>
            The unique label of this shape geometry
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.IfcShapeLabel">
            <summary>
            The label of the IFC object that defines this shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.GeometryHash">
            <summary>
             Hash of the shape Geometry, based on the IFC representation, this is not unique
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.Cost">
            <summary>
            The cost in bytes of this shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.ReferenceCount">
            <summary>
            The number of references to this shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.LOD">
            <summary>
            The level of detail or development that the shape is suited for
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.Format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.Xbim#Common#Geometry#IXbimShapeGeometryData#Format">
            <summary>
            The format in which the shape data is represented, i.e. triangular mesh, polygon, opencascade as a byte
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.BoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.Xbim#Common#Geometry#IXbimShapeGeometryData#BoundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.ShapeData">
            <summary>
            The geometry data defining the shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.Xbim#Common#Geometry#IXbimShapeGeometryData#ShapeDataCompressed">
            <summary>
            The geometry data defining the shape, this is a compressed representation of the data
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeGeometry.IsValid">
            <summary>
            Returns true if the geometry is valid
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeInstanceStyleGrouping.System#Linq#IGrouping{System#Int32,Xbim#Common#Geometry#XbimShapeInstance}#Key">
            <summary>
            This is the lable of the surface style
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.XbimShapeInstance">
            <summary>
            A shape with a shapegeometry that has been placed as a specific instance in the scene
            i.e. it has had all maps performed and it has been transformed to the correct location
            This represents a geometry mesh, with a texture that is placed in world coordinate systems
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._instanceLabel">
            <summary>
            The unique label of this shape instance
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._expressTypeId">
            <summary>
            The IFC type of the product this instance represents
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._ifcProductLabel">
            <summary>
            The label of the IFC Product object that  this instance fully or partly defines
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._styleLabel">
            <summary>
            The style that this shape is presented in when it overrides the shape style
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._shapeLabel">
            <summary>
            The id of the shape  that this is an instance of
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._representationContext">
            <summary>
            The label of the IFC representation context of this instance
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._representationType">
            <summary>
            What type of representation, typically this is how the shape has been generated, i.e. openings have been applied or not applied
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._transformation">
            <summary>
            The transformation to be applied to shape to place it in the world coordinates
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimShapeInstance._boundingBox">
            <summary>
            The bounding box of this instance, requires tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeInstance.BoundingBox">
            <summary>
            The bounding box of this instance, does not require tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeInstance.Xbim#Common#Geometry#IXbimShapeInstanceData#BoundingBox">
            <summary>
            The bounding box of this instance, does not require tranformation to place in world coordinates
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimShapeInstance.HasStyle">
            <summary>
            returns true if the shape instance has a defined style
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IGeometryManager">
            <summary>
            Interface to hold the geometry engine, a specific instance must be created, see Xbim.ModelGeometry.Converter
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimCurve">
            <summary>
            A curve in 2D or 3D
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimCurve.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimEdge.EdgeStart">
            <summary>
            Start point (vertex) of the edge
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimEdge.EdgeEnd">
            <summary>
            End point (vertex) of the edge
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimEdge.EdgeGeometry">
            <summary>
            The curve defining the form of the edge
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimEdge.Length">
            <summary>
            The length of edge, including any curvature
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimEdge.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimFace.Normal">
            <summary>
            The topological normal of the face, nb.  this may differ from the normal of the bound
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimFace.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimGeometryObject">
            <summary>
            Abstract class for all Xbim Geometry objects
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimGeometryObject.IsSet">
            <summary>
            True if the geometry object is a collection
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IXbimGeometryObject.Transform(Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Returns a copy of the current object transformed by matrix3D, it is gauranteed to return the same type as "this"
            </summary>
            <param name="matrix3D"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.IXbimGeometryObject.TransformShallow(Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Returns a new version of the object transformed but does not perform a deepcopy, changes to this  will be reflected in the copy and vice versa
            </summary>
            <param name="matrix3D"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimGeometryObject.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this element
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimGeometryObjectSet">
            <summary>
            A mixed collection of geometry objects
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IXbimGeometryObjectSet.Sew">
            <summary>
            Sews the objects to remove duplicate vertices and edges and make the highest level topology
            </summary>
            <returns>True if the object was sewn, false it is already sewn</returns>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimGeometryObjectSet.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimMesh.IsSolid">
            <summary>
            The mesh is a closed manifold shape
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimOrientedEdge">
            <summary>
            An oriented edge is an edge constructed from another edge and contains a BOOLEAN direction flag to indicate whether or not the orientation of the constructed edge agrees with the orientation of the original edge.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimOrientedEdge.EdgeElement">
            <summary>
            Edge entity used to construct this oriented edge.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimOrientedEdge.SameSense">
            <summary>
            If TRUE the topological orientation as used coincides with the orientation from start vertex to end vertex of the edge element. If FALSE otherwise.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimOrientedEdge.EdgeStart">
            <summary>
            Start point (vertex) of the edge, after considering orientation
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimOrientedEdge.EdgeEnd">
            <summary>
            End point (vertex) of the edge, after considering orientation
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimPoint">
            <summary>
            A 3 Dimensional Point
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimShell">
            <summary>
            A set of connected faces
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShell.IsClosed">
            <summary>
            The shell is a closed manifold shape
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimShell.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IXbimShellSet.Union(System.Double)">
            <summary>
            Unions all elements in the  set and updates the set to the result
            </summary>
            <param name="tolerance"></param>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimSolid">
            <summary>
            A manifold closed shell
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimSolid.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IXbimSolidSet.Add(Xbim.Common.Geometry.IXbimGeometryObject)">
            <summary>
            Will add any solids in the geomtry object to the set
            </summary>
            <param name="solid"></param>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimSolidSet.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimVertex.VertexGeometry">
            <summary>
            The geometric point, which defines the position in geometric space of the vertex.
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimVertex.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.IXbimWire">
            <summary>
                A wire is a connected set of one or more edges
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.Edges">
            <summary>
            List of connected oriented edges
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.Vertices">
            <summary>
            Unique vertices in the shape, not in order
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.Points">
            <summary>
            Points in order of the wire
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.Normal">
            <summary>
             The normal of the loop, calculated using the Newell's normal method
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.IsPlanar">
            <summary>
            The vertices lay on a planar surface within the specified tolerance of the vertices
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.IsClosed">
            <summary>
            The wire is a closed loop
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.Start">
            <summary>
            First point of the wire
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.End">
            <summary>
            Last point of the wire
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.Length">
            <summary>
            Length of the wire
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.IXbimWire.Trim(System.Double,System.Double,System.Double)">
            <summary>
            Returns a segment of the wire from start to end position
            </summary>
            <param name="start">The distanceto trim from the start of the wire</param>
            <param name="end">The distance to trim to, from the start of the wire</param>
            <param name="tolerance">The distance at which two points are considered to be the same</param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.Geometry.IXbimWire.ToBRep">
            <summary>
            Converts the object to a string in BRep format
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.XbimBBoxClusterElement">
            <summary>
            This class is used to organise clusters of elements in case a scene needs to be split up.
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.XbimGeometryRepresentationType">
            <summary>
            Discriminates representations on the application of boolean operations
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryRepresentationType.OpeningsAndAdditionsIncluded">
            <summary>
            boolean operations with voids and extensions are included in the resulting representation
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryRepresentationType.OpeningsAndAdditionsExcluded">
            <summary>
            boolean operations with voids and extensions are excluded in the resulting representation
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryRepresentationType.OpeningsAndAdditionsOnly">
            <summary>
            representation of voids and extensions only 
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryType.BoundingBox">
            <summary>
            This type can be transformed to XbimRect3D via XbimRect3D.FromArray(geomdata.ShapeData)
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryType.Region">
            <summary>
            Regions (clusters of elements in a model) are stored for the project in one database row.
            Use XbimRegionCollection.FromArray(ShapeData) for deserialising.
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryType.TransformOnly">
            <summary>
            For products with no geometry use TransformOnly to store the transform matrix associated with the placement.
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryType.TriangulatedMeshHash">
            <summary>
            128 bit hash of a geometry
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryType.Polyhedron">
            <summary>
            The xBIM variant of the PLY format, a set of nominally planar polygons, stored in ascii format
            </summary>
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryType.TriangulatedPolyhedron">
            <summary>
            A triangulated Polyhedron mesh
            </summary> = 
        </member>
        <member name="F:Xbim.Common.Geometry.XbimGeometryType.PolyhedronBinary">
            <summary>
            The xBIM variant of the PLY format, a set of nominally planar polygons but stored in binary format
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialises with doubles
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.FromString(System.String)">
            <summary>
            Converts string of 15 reals to a matrix
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.Multiply(Xbim.Common.Geometry.XbimMatrix3D,Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Performs a matrix multiplication
            </summary>
            <param name="mat1">mat First operand</param>
            <param name="mat2">mat2 Second operand</param>
            <returns>dest if specified, mat otherwise</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.Equal(Xbim.Common.Geometry.XbimMatrix3D,Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Compares two matrices for equality within a certain margin of error
            </summary>
            <param name="a">a First matrix</param>
            <param name="b">b Second matrix</param>
            <returns>True if a is equivalent to b</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.Copy(Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Creates a new instance of a mat4
            </summary>
            <param name="m">Single[16] containing values to initialize with</param>
            <returns>New mat4New mat4</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.CreateScale(System.Double)">
            <summary>
            Creates a 3D scaling matrix.
            </summary>
            <param name="uniformScale">>The scaling factor along all axis.</param>
            <returns>The new scaling matrix</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a 3D scaling matrix.
            </summary>
            <param name="scaleX">>The scaling factor along the x-axis.</param>
            <param name="scaleY">>The scaling factor along the y-axis.</param>
            <param name="scaleZ">>The scaling factor along the z-axis.</param>
            <returns>The new scaling matrix</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a 3D translation matrix.
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.CreateTranslation(Xbim.Common.Geometry.XbimVector3D)">
            <summary>
            Creates a 3D translation matrix.
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.Str">
            <summary>
            Returns a string representation of a mat4
            </summary>
            <returns>String representation of mat</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.Decompose(Xbim.Common.Geometry.XbimVector3D@,Xbim.Common.Geometry.XbimQuaternion@,Xbim.Common.Geometry.XbimVector3D@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.RotateAroundXAxis(System.Double)">
            <summary>
            Apply a X-Axis rotation to the matrix
            </summary>
            <param name="radAngle">Angle in radians</param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.RotateAroundYAxis(System.Double)">
            <summary>
            Apply a Y-Axis rotation to the matrix
            </summary>
            <param name="radAngle">Angle in radians</param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimMatrix3D.RotateAroundZAxis(System.Double)">
            <summary>
            Apply a Z-Axis rotation to the matrix
            </summary>
            <param name="radAngle">Angle in radians</param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimPackedNormal.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Normalized normal vector. If the vector is not normalized packing will result in wrong results.
            </summary>
            <param name="x">X direction of the normalized normal vector</param>
            <param name="y">Y direction of the normalized normal vector</param>
            <param name="z">Z direction of the normalized normal vector</param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimPoint3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimPoint3D.Add(Xbim.Common.Geometry.XbimPoint3D,Xbim.Common.Geometry.XbimVector3D)">
            <summary>
            Adds a XbimPoint3D structure to a XbimVector3D and returns the result as a XbimPoint3D structure.
            </summary>
            <param name="p"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimQuaternion.RotationMatrix(Xbim.Common.Geometry.XbimMatrix3D@,Xbim.Common.Geometry.XbimQuaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimQuaternion.Transform(Xbim.Common.Geometry.XbimVector3D@,Xbim.Common.Geometry.XbimQuaternion@,Xbim.Common.Geometry.XbimVector3D@)">
            <summary>
            Transforms a 3D vector by the given <see cref="!:SharpDX.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="!:SharpDX.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="!:SharpDX.Vector4"/>.</param>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimRect3D.Min">
            <summary>
            Minimum vertex
            </summary>
        </member>
        <member name="P:Xbim.Common.Geometry.XbimRect3D.Max">
            <summary>
            Maximum vertex
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.FromArray(System.Byte[])">
            <summary>
            Reinitialises the rectangle 3D from the byte array
            </summary>
            <param name="rect"></param>
            <param name="array">6 doubles, definine, min and max values of the boudning box</param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.ToDoublesArray">
            <summary>
            Writes the Bounding Box as 6 doubles.
            </summary>
            <returns>An array of doubles (Position followed by Size).</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.ToFloatArray">
            <summary>
            Writes the Bounding Box as 6 floats.
            </summary>
            <returns>An array of floats (Position followed by Size).</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.FromString(System.String)">
            <summary>
            Imports values from a string
            </summary>
            <param name="Value">A space-separated string of 6 invariant-culture-formatted floats (x,y,z,sizeX,sizeY,sizeZ)</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.Centroid">
            <summary>
            Calculates the centre of the 3D rect
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.TransformBy(Xbim.Common.Geometry.XbimRect3D,Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Transforms a bounding rect so that it is still axis aligned
            </summary>
            <param name="rect3d"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.Radius">
            <summary>
            Returns the radius of the sphere that contains this bounding box rectangle 3D
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.Length">
            <summary>
            Indicative size of the Box along all axis.
            </summary>
            <returns>Returns the length of the diagonal</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.Transform(Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Warning: This function assumes no rotation is used for the tranform.
            </summary>
            <param name="composed">The NON-ROTATING transform to apply</param>
            <returns>the transformed bounding box.</returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.Round(System.Int32)">
            <summary>
            Rounds the values of the bounding box to the specified precision
            </summary>
            <param name="digits"></param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.Round(Xbim.Common.Geometry.XbimRect3D,System.Int32)">
            <summary>
            Rounds the values of the bounding box to the specified precision and returns a copy
            </summary>
            <param name="r"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimRect3D.IsSimilar(Xbim.Common.Geometry.XbimRect3D,System.Double)">
            <summary>
            true if the rect fits inside thsi rectangle when it is either inflated or defalted by the tolerance
            </summary>
            <param name="xbimRect3D"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimShapeTriangulation.TriangleCount(System.Byte[])">
            <summary>
            Returns the number of triangles in the XbimShapeTriangulation data
            </summary>
            <param name="triangulationData"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimShapeTriangulation.VerticesCount(System.Byte[])">
            <summary>
            Returns the number of vertices in the XbimShapeTriangulation data
            </summary>
            <param name="triangulationData"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimVector3D.IsOpposite(Xbim.Common.Geometry.XbimVector3D,System.Double)">
            <summary>
            Returns true if the angle is less than tolerance
            </summary>
            <param name="other">other vector</param>
            <param name="angularTolerance">Tolerance in radians</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimVector3D.IsParallel(Xbim.Common.Geometry.XbimVector3D,System.Double)">
            <summary>
            Returns true if the vectors are parallel
            </summary>
            <param name="other">other vector</param>
            <param name="angularTolerance">Tolerance in radians</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimVector3D.IsNormal(Xbim.Common.Geometry.XbimVector3D,System.Double)">
            <summary>
            Returns true if the vectors are normal
            </summary>
            <param name="other">other vector</param>
            <param name="angularTolerance">Tolerance in radians</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimVector3D.Negated">
            <summary>
            Makes the vector point in the opposite direction
            </summary>
        </member>
        <member name="T:Xbim.Common.Geometry.XbimShapeEqualityComparer">
            <summary>
            Conpares the shape data of two geometry objects to see if they are the same
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimGeometryData.TriangulatedFaceSet">
            <summary>
            Generates a triangulated face set from the binary shape data
            </summary>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimGeometryData.TransformBy(Xbim.Common.Geometry.XbimMatrix3D)">
            <summary>
            Transforms the shape data of the geometry by the matrix
            NB This is a deprecated method and will be removed for the latest geometry support and is only used in first geometry implementation
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimGeometryData.#ctor(System.Int32,System.Int32,Xbim.Common.Geometry.XbimGeometryType,System.Int16,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            The constructs an XbimGeoemtryData object, the geometry hash is calculated from the array of shape data
            </summary>
            <param name="geometrylabel"></param>
            <param name="productLabel"></param>
            <param name="geomType"></param>
            <param name="ifcTypeId"></param>
            <param name="shape"></param>
            <param name="transform"></param>
            <param name="styleLabel"></param>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimGeometryData.IsGeometryEqual(Xbim.Common.Geometry.XbimGeometryData)">
            <summary>
            Returns true if the two geometries have identical shape data
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Geometry.XbimGeometryData.GenerateGeometryHash(System.Byte[])">
            <summary>
            Generates a FNV hash for any array of bytes
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.PersistEntity.ModelOf">
            <summary>
            This property is deprecated and likely to be removed. Use just 'Model' instead.
            </summary>
        </member>
        <member name="T:Xbim.Common.PlaceboTransaction">
            <summary>
            A class of transaction that has no impact and does nothing used when another transaction is normally running
            </summary>
        </member>
        <member name="T:Xbim.Common.EntityAttributeState">
            <summary>
              The scope of the entity attribute
            </summary>
        </member>
        <member name="T:Xbim.Common.IndexedProperty">
            <summary>
            Indicates that this property plays a role in some inverse relation
            </summary>
        </member>
        <member name="T:Xbim.Common.Metadata.ExpressMetaData">
            <summary>
              A collection of IPersistEntity instances, optimised for EXPRESS models
            </summary>
        </member>
        <member name="F:Xbim.Common.Metadata.ExpressMetaData.Module">
            <summary>
            Module for which this meta data structure is created
            </summary>
        </member>
        <member name="F:Xbim.Common.Metadata.ExpressMetaData._typeIdToExpressTypeLookup">
            <summary>
            Look up for the if of an entity that returns the ExpresType
            </summary>
        </member>
        <member name="F:Xbim.Common.Metadata.ExpressMetaData._typeToExpressTypeLookup">
            <summary>
            Look up the entity Type and return the ExpressType
            </summary>
        </member>
        <member name="F:Xbim.Common.Metadata.ExpressMetaData._typeNameToExpressTypeLookup">
            <summary>
            Look up the name of an entity and return the ExpressType
            </summary>
        </member>
        <member name="F:Xbim.Common.Metadata.ExpressMetaData._persistNameToExpressTypeLookup">
            <summary>
            Look up the name of an entity and return the ExpressType
            </summary>
        </member>
        <member name="F:Xbim.Common.Metadata.ExpressMetaData._interfaceToExpressTypesLookup">
            <summary>
            Look up ExpressTypes implementing an interface
            </summary>
        </member>
        <member name="F:Xbim.Common.Metadata.ExpressMetaData.Cache">
            <summary>
            Static cache to avoid multiple creation of the structure
            </summary>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.GetMetadata(System.Reflection.Module)">
            <summary>
            This method creates metadata model for a specified module based on reflection and custom attributes.
            It only creates ExpressMetaData once for any module. If it already exists it is retrieved from a 
            static cache. However, for a performance reasons try to minimize this and rather keep a single instance
            reference for your code.
            </summary>
            <param name="module">Assembly module which contains single schema model</param>
            <returns>Meta data structure for the schema defined within the module</returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.ExpressType(System.String)">
            <summary>
            Returns the ExpressType with the specified name (name of type or express name)
            </summary>
            <param name="typeName">The name of the type in uppercase (either type name or persistance name. 
            These are not necesarilly the same)</param>
            <returns>The foud type (or Null if not found)</returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.ExpressType(System.Type)">
            <summary>
            Returns the ExpressType with the specified type
            </summary>
            <param name="type">The type</param>
            <returns>The foud type (or Null if not found)</returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.ExpressType(System.Int16)">
            <summary>
            returns the ExpressType corresponding to the TypeId
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.ExpressTypeId(System.Type)">
            <summary>
            returns the express type id of the type, if the type is not an entity and excpetion will be thrown
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.ExpressTypeId(System.String)">
            <summary>
            Returns the typeId for the named type
            </summary>
            <param name="typeName">the name of the type, this is in uppercase</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.GetType(System.Int16)">
            <summary>
            Returns the Type of the Entity with typeId
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.ExpressType(Xbim.Common.IPersist)">
            <summary>
            Returns the ExpressType of the specified entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.TryGetExpressType(System.String,Xbim.Common.Metadata.ExpressType@)">
            <summary>
            Trys to get the specified Type with the typeName, if the ExpressType does not exist false is returned
            </summary>
            <param name="typeName"></param>
            <param name="expressType"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressMetaData.IsIndexedEntityAttribute(System.String,System.Int32)">
            <summary>
            Returns true if the named entities attribute is indexed
            </summary>
            <param name="entityTypeName">the name of the Entity</param>
            <param name="attributeIndex">the index offset of the attribute to check, nb this is a 1 based index</param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.Metadata.ExpressType.NonAbstractSubTypes">
            <summary>
            Don't ask for this before types hierarchy is finished or it will cache incomplete result.
            </summary>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressType.GetIndexedValues(Xbim.Common.IPersistEntity)">
            <summary>
            If the type has indexed attributes, this returns a set of unique values for the specified IPersistEntity
            </summary>
            <param name="ent"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Metadata.ExpressType.IsIndexedAttribute(System.Int32)">
            <summary>
            returns true if the attribute is indexed
            </summary>
            <param name="attributeIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.Metadata.ExpressType.HasIndexedAttribute">
            <summary>
            Returns true if the type has an indexed attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.Metadata.ExpressType.AllSubTypes">
            <summary>
            deep enumeration of all subtypes down in the inheritance hierarchy
            </summary>
        </member>
        <member name="T:Xbim.Common.Logging.Providers.AttributeHelper">
            <summary>
            A helper class used to retrieve attributes from Assemblies and Types
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.AttributeHelper.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieve a list of attributes of type T from the member provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.AttributeHelper.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Retrieve attribute T from the member provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.AttributeHelper.GetDescriptionAttributeValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieve DescriptionAttributeValue from the member provided
            </summary>
            <param name="mInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Xbim.Common.Logging.Providers.DefaultLogger">
            <summary>
            A Default logging system based on <see cref="T:System.Diagnostics.Trace"/>
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Debug(System.Object)">
            <summary>
            Logs the specified message with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.DefaultLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Debug.
            </summary>
            <value>
            	<c>true</c> if this log is Debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Info(System.Object)">
            <summary>
            Logs the specified message with the <c>INFO</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Info(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>INFO</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.DefaultLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Info.
            </summary>
            <value>
            	<c>true</c> if this log is Info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Warn(System.Object)">
            <summary>
            Logs the specified message with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Warn(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.DefaultLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Warn.
            </summary>
            <value>
            	<c>true</c> if this log is Warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Error(System.Object)">
            <summary>
            Logs the specified message with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Error(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.DefaultLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Error.
            </summary>
            <value>
            	<c>true</c> if this log is Error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Fatal(System.Object)">
            <summary>
            Logs the specified message with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.DefaultLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Fatal.
            </summary>
            <value>
            	<c>true</c> if this log is Fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultLogger.UnhandledException(System.Exception)">
            <summary>
            Logs the unhandled exception with Fatal level
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Xbim.Common.Logging.Providers.DefaultProvider">
            <summary>
            Provides basic logging capabilities utilising <see cref="T:System.Diagnostics.Trace"/> through the <see cref="T:Xbim.Common.Logging.Providers.DefaultLogger"/> Logger.
            </summary>
            <remarks>A <see cref="T:System.Diagnostics.TraceListener"/> implementation will be required to 
            monitor this log.</remarks>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultProvider.Configure">
            <summary>
            Configures the logging environment for first use.
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.DefaultProvider.GetLogger(System.Type)">
            <summary>
            Gets the <see cref="T:Xbim.Common.Logging.ILogger"/> applicable for this <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An <see cref="T:Xbim.Common.Logging.ILogger"/> for this Type.</returns>
            <remarks>The default provider does not make use of the Type.</remarks>
        </member>
        <member name="T:Xbim.Common.Logging.Providers.ILoggingProvider">
            <summary>
            Defines the interface for a provider of logging services.
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.ILoggingProvider.Configure">
            <summary>
            Configures the logging environment for first use.
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.ILoggingProvider.GetLogger(System.Type)">
            <summary>
            Gets the <see cref="T:Xbim.Common.Logging.ILogger"/> applicable for this <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <remarks>Logging consumers provider a Type to this call so that the Logging Provider
            can customise the logger dynamically for the Type. More advanced logging systems, such 
            as log4Net can use this to provide different logging levels and outputs for different
            parts of the application.</remarks>
            <returns>An <see cref="T:Xbim.Common.Logging.ILogger"/> for this Type.</returns>
        </member>
        <member name="T:Xbim.Common.Logging.Providers.Log4NetLogger">
            <summary>
            A simple wrapper class for the Log4Net logging framework.
            </summary>
            <remarks>Decouples consumers from the underlying Log4Net assemblies, 
            while exposing its functionality.</remarks>
        </member>
        <member name="F:Xbim.Common.Logging.Providers.Log4NetLogger.ThisDeclaringType">
            <summary>
            Type used to tell the base log4Net Logger which is the boundary in the stack frame 
            indicating the logger entry point.
            </summary>
            <remarks>Means we get accurate Class/Method info in the logs.</remarks>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbim.Common.Logging.Providers.Log4NetLogger"/> class.
            </summary>
            <param name="type">The calling type.</param>
            <remarks>By building a logger for each type we can take advantage of log4Net's 
            hierarchical configuration system.</remarks>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Debug(System.Object)">
            <summary>
            Logs the specified message with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Debug.
            </summary>
            <value>
            	<c>true</c> if this log is Debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Info(System.Object)">
            <summary>
            Logs the specified message with the <c>INFO</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Info(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>INFO</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Info.
            </summary>
            <value>
            	<c>true</c> if this log is Info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Warn(System.Object)">
            <summary>
            Logs the specified message with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Warn(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Warn.
            </summary>
            <value>
            	<c>true</c> if this log is Warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Error(System.Object)">
            <summary>
            Logs the specified message with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Error(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Error.
            </summary>
            <value>
            	<c>true</c> if this log is Error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Fatal(System.Object)">
            <summary>
            Logs the specified message with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Fatal.
            </summary>
            <value>
            	<c>true</c> if this log is Fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetLogger.UnhandledException(System.Exception)">
            <summary>
            Logs the unhandled exception with Fatal level
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Xbim.Common.Logging.Providers.Log4NetProvider">
            <summary>
            Provides advanced logging capabilities using log4net through the <see cref="T:Xbim.Common.Logging.Providers.Log4NetLogger"/> Logger.
            </summary>
            <remarks>See http://logging.apache.org/log4net/release/manual/introduction.html for more on log4net logging.</remarks>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetProvider.Configure">
            <summary>
            Configures the log4Net environment for first use.
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.Providers.Log4NetProvider.GetLogger(System.Type)">
            <summary>
            Gets the <see cref="T:Xbim.Common.Logging.ILogger"/> applicable for this <see cref="T:System.Type"/>.
            </summary>
            <param name="callingType">The type.</param>
            <remarks>Logging consumers provider a Type to this call so that the Logging Provider
            can customise the logger dynamically for the Type. More advanced logging systems, such 
            as log4Net can use this to provide different logging levels and outputs for different
            parts of the application.</remarks>
            <returns>An <see cref="T:Xbim.Common.Logging.ILogger"/> for this Type.</returns>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetProvider.LogPath">
            <summary>
            Gets the log path.
            </summary>
            <value>The log path.</value>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetProvider.LogFileName">
            <summary>
            Gets the name of the log file.
            </summary>
            <value>The name of the log file.</value>
        </member>
        <member name="P:Xbim.Common.Logging.Providers.Log4NetProvider.ApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="T:Xbim.Common.Logging.EventTrace">
            <summary>
            Logging helper class that enables an application to access the logger data as an in-memory collection of Events.
            </summary>
        </member>
        <member name="T:Xbim.Common.Logging.ILogger">
            <summary>
            Defines the interface of a generic logging system.
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Debug(System.Object)">
            <summary>
            Logs the specified message with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Debug.
            </summary>
            <value>
            	<c>true</c> if this log is Debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Info(System.Object)">
            <summary>
            Logs the specified message with the <c>INFO</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>INFO</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Info.
            </summary>
            <value>
            	<c>true</c> if this log is Info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Warn(System.Object)">
            <summary>
            Logs the specified message with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Warn.
            </summary>
            <value>
            	<c>true</c> if this log is Warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Error(System.Object)">
            <summary>
            Logs the specified message with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Error.
            </summary>
            <value>
            	<c>true</c> if this log is Error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Fatal(System.Object)">
            <summary>
            Logs the specified message with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs the specified message and exception with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
        </member>
        <member name="P:Xbim.Common.Logging.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this log is enabled for Fatal.
            </summary>
            <value>
            	<c>true</c> if this log is Fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Xbim.Common.Logging.ILogger.UnhandledException(System.Exception)">
            <summary>
            Logs the unhandled exception with Fatal level
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Xbim.Common.Logging.LoggerFactory">
            <summary>
            A class which acts as a Factory for Loggers.
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.LoggerFactory.ResolveLoggingProvider">
            <summary>
            Resolves the Logging Provider for the current application
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.LoggerFactory.ConfigureLogging">
            <summary>
            Configures the Logging System.
            </summary>
        </member>
        <member name="M:Xbim.Common.Logging.LoggerFactory.GetLogger(System.Type)">
            <summary>
            Gets an <see cref="T:Xbim.Common.Logging.ILogger"/> to use for logging, based on the supplied <see cref="T:System.Type"/>.
            </summary>
            <param name="callingType">Type of the caller.</param>
            <returns></returns>
            <remarks>By supplying the Type it is possible to configure the logging system
            to log messages for each type differently. This can allow the user to change the log level,
            and the means of output for particular areas of the system.</remarks>
        </member>
        <member name="M:Xbim.Common.Logging.LoggerFactory.GetLogger">
            <summary>
            Gets a <see cref="T:Xbim.Common.Logging.ILogger"/> to use for logging, based on the calling methods's Declaring Type.
            </summary>
            <returns></returns>
            <remarks>
            By using the caller's Type it is possible to configure the logging system
            to log messages from each type differently. This can allow the user to change the log level,
            and the means of output for particular areas of the system.
            </remarks>
        </member>
        <member name="M:Xbim.Common.Logging.LoggerFactory.CreateEventTrace">
            <summary>
            Creates an EventTrace object that captures events from the underlying LoggingProvider using an in memory provider.
            </summary>
            <remarks>Currently only supported by the Log4Net provider.
            The EventTrace class should be Disposed of as soon as possible to avoid excessive memory usage</remarks>
            <returns>An EventTrace object</returns>
        </member>
        <member name="M:Xbim.Common.IReadOnlyEntityCollection.Where``1(System.Func{``0,System.Boolean})">
            <summary>
            Returns all entities satysfying the condition
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="condition">Condition to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.IReadOnlyEntityCollection.Where``1(System.Func{``0,System.Boolean},System.String,Xbim.Common.IPersistEntity)">
            <summary>
            Returns all entities satysfying the condition utilizing secondary index for inverse relations.
            Always use this overload if you query for the entities on the other side of inverse relation (like all IfcRelations).
            It might be significantly optimized in the implementation of this interface especially if the data
            is stored in the database.
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="condition">Condition</param>
            <param name="inverseProperty">Name of the property which is being evaluated</param>
            <param name="inverseArgument">Entity which should be equal/contained in the property</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.IReadOnlyEntityCollection.FirstOrDefault``1">
            <summary>
            Returns first or default entity satysfying the condition
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.IReadOnlyEntityCollection.FirstOrDefault``1(System.Func{``0,System.Boolean})">
            <summary>
            Returns first or default entity satysfying the condition
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="condition">Condition to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.IReadOnlyEntityCollection.FirstOrDefault``1(System.Func{``0,System.Boolean},System.String,Xbim.Common.IPersistEntity)">
            <summary>
            Returns firs or default entitiy satysfying the condition utilizing secondary index for inverse relations.
            Always use this overload if you query for the entities on the other side of inverse relation (like all IfcRelations).
            It might be significantly optimized in the implementation of this interface especially if the data
            is stored in the database.
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="condition">Condition</param>
            <param name="inverseProperty">Name of the property which is being evaluated</param>
            <param name="inverseArgument">Entity which should be equal/contained in the property</param>
            <returns></returns>
        </member>
        <member name="T:Xbim.Common.PersistEntityExtensions">
            <summary>
            Extension methods for the <see cref="T:Xbim.Common.IPersist"/> interface.
            </summary>
        </member>
        <member name="M:Xbim.Common.PersistEntityExtensions.HandleUnexpectedAttribute(Xbim.Common.IPersist,System.Int32,Xbim.Common.IPropertyValue)">
            <summary>
            Handles the case where a property was not expected for this entity.
            </summary>
            <param name="persistIfc">The item being parsed.</param>
            <param name="propIndex">Index of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:Xbim.Common.IModel.UserDefinedId">
            <summary>
            Returns or sets a user defined id for the model
            </summary>
        </member>
        <member name="P:Xbim.Common.IModel.GeometryStore">
            <summary>
            Returns a geometry store, null if geometry storage is not supported
            </summary>
        </member>
        <member name="P:Xbim.Common.IModel.Instances">
            <summary>
            All instances which exist within a scope of the model.
            Use this property to retrieve the data from model.
            </summary>
        </member>
        <member name="M:Xbim.Common.IModel.Activate(Xbim.Common.IPersistEntity)">
            <summary>
            This function is to be used by entities in the model
            in cases where data are persisted and entities are activated 
            on-the-fly as their properties are accessed.
            </summary>
            <param name="owningEntity">Entity to be activated</param>
            <returns>True if activation was successful, False otherwise</returns>
        </member>
        <member name="M:Xbim.Common.IModel.Delete(Xbim.Common.IPersistEntity)">
            <summary>
            Deletes entity from the model and removes all references to this entity in all entities
            in the model. This operation is potentially very expensive and some implementations of
            IModel might not implement it at all.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Xbim.Common.IModel.BeginTransaction(System.String)">
            <summary>
            Begins transaction on the model to handle all modifications. You should use this function within
            a 'using' statement to restrict scope of the transaction. IModel should only hold weak reference to
            this object in 'CurrentTransaction' property.
            </summary>
            <param name="name">Name of the transaction. This is useful in case you keep the transactions for undo-redo sessions</param>
            <returns>Transaction object.</returns>
        </member>
        <member name="P:Xbim.Common.IModel.CurrentTransaction">
            <summary>
            It is a good practise to implement this property with WeakReference back field so it gets disposed 
            when transaction goes out of the scope. It would stay alive otherwise which is not desired unless you 
            want to keep it for undo-redo sessions. But even it that case it should be referenced from elsewhere.
            </summary>
        </member>
        <member name="P:Xbim.Common.IModel.Metadata">
            <summary>
            Metadata representing current data schema of the model. This keeps pre-cached reflection information
            for efficient operations on the schema.
            </summary>
        </member>
        <member name="P:Xbim.Common.IModel.ModelFactors">
            <summary>
            If model contains a geometry and if IModel implementation supports it this property will return conversion factors for 
            base units to be used for geometry processing and other tasks.
            </summary>
        </member>
        <member name="M:Xbim.Common.IModel.InsertCopy``1(``0,Xbim.Common.XbimInstanceHandleMap,Xbim.Common.PropertyTranformDelegate,System.Boolean,System.Boolean)">
            <summary>
             Implementation of IModel variant of InsertCopy() function
             </summary>
             <typeparam name="T">Type of the object to be inserted. This must be a type supported by this model</typeparam>
             <param name="toCopy">Object to copy</param>
             <param name="mappings">Mappings make sure object is only inserted once. You should use one instance of mappings for all InsertCopy() calls between two models</param>
             <param name="propTransform">Delegate which can be used to transform properties. You can use this to filter out certain properties or referenced objects</param>
             <param name="includeInverses">If TRUE inverse relations are also copied over. This may potentially bring over almost entire model if not controlled by propTransform delegate</param>
             <param name="keepLabels">If TRUE entity labels of inserted objects will be the same as the labels of original objects. This should be FALSE if you are inserting objects to existing model
             or if you are inserting objects from multiple source models into a single target model where entity labels may potentially clash.</param>
             <returns>New created object in this model which is a deep copy of original object</returns>
             <returns></returns>
        </member>
        <member name="M:Xbim.Common.IModel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs a set of actions on a collection of entities inside a single read only transaction
            This improves database  performance for retrieving and accessing complex and deep objects
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="body"></param>
        </member>
        <member name="E:Xbim.Common.IModel.EntityNew">
            <summary>
            This event is fired every time new entity is created.
            </summary>
        </member>
        <member name="E:Xbim.Common.IModel.EntityModified">
            <summary>
            This event is fired every time any entity is modified. If your model is not
            transactional it might not be called at all as the central point for all
            modifications is a transaction.
            </summary>
        </member>
        <member name="E:Xbim.Common.IModel.EntityDeleted">
            <summary>
            This event is fired every time when entity gets deleted from model.
            </summary>
        </member>
        <member name="M:Xbim.Common.IModel.BeginCaching">
            <summary>
            This will start to cache inverse relations which are heavily used in EXPRESS schema
            to model bidirectional relations. You shouldn't only use cache outside of transaction
            when you query the data but you don't change any values. Implementations of IModel
            might throw an exception in case you call this function inside of transaction
            or if you begin transaction before you stop caching. You should always keep the caching
            object inside of using statement as IModel should only hold the weak reference to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xbim.Common.IModel.StopCaching">
            <summary>
            Stops caching of inverse relations and forces it to dispose and not to be used anymore
            </summary>
        </member>
        <member name="P:Xbim.Common.IModel.InverseCache">
            <summary>
            Implementations of IModel should only keep a weak reference to the caching object so that
            user can use using statement to constrain existence of the cache. Entity collection might use
            this cache to speed up search for inverse relations.
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.ProfileDefLevelOfDetail">
            <summary>
            Indicates level of detail for IfcProfileDefinitions, if 0 no fillet radii are applied, no leg slopes area applied, if 1 all details are applied
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.SimplifyFaceCountThreshHold">
            <summary>
            If this number is greater than 0, any faceted meshes will be simplified if the number of faces exceeds the threshold
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.ShortestEdgeLength">
            <summary>
            If the SimplifyFaceCountThreshHold is greater than 0, this is the minimum length of any edge in a face in millimetres, default is 10mm
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.PrecisionBoolean">
            <summary>
            Precision used for Boolean solid geometry operations, default 0.001mm
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.PrecisionBooleanMax">
            <summary>
            The maximum Precision used for Boolean solid geometry operations, default 10mm
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.DeflectionTolerance">
            <summary>
            The defection on a curve when triangulating the model
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.AngleToRadiansConversionFactor">
            <summary>
            Convert degrees to radians
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.LengthToMetresConversionFactor">
            <summary>
            Conversion to metres
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.VertexPointDiameter">
            <summary>
            Used to display a vertex this is the diameter that will be used to auto-generate a geometric representation of a topological vertex
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.MaxBRepSewFaceCount">
            <summary>
            The maximum number of faces to sew and check the result is a valid BREP, face sets with more than this number of faces will be processed 
            as read from the model
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.Precision">
            <summary>
            The  normal tolerance under which two given points are still assumed to be identical
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.PrecisionMax">
            <summary>
            Returns the value for one metre in the units of the model
            </summary>
            /// <summary>
            The  maximum tolerance under which two given points are still assumed to be identical
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.Rounding">
            <summary>
            The number of decimal places to round a number to in order to truncate distances, not to be confused with precision, this is 
            mostly for hashing and reporting, precision determines if two points are the same. NB this must be less that the precision for Booleans
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.OneMilliMetre">
            <summary>
            Returns the value for one millimetre in the units of the model
            </summary>
        </member>
        <member name="P:Xbim.Common.IModelFactors.DeflectionAngle">
            <summary>
            The min angle used when meshing shapes, works with DeflectionTolerance to set the resolution for linearizing edges, default = 0.5
            </summary>
        </member>
        <member name="M:Xbim.Common.XbimModelFactors.ApplyWorkAround(System.String)">
            <summary>
            returns true if a model specific work around needs to be applied
            </summary>
            <param name="workAroundName"></param>
            <returns></returns>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.ProfileDefLevelOfDetail">
            <summary>
            Indicates level of detail for IfcProfileDefinitions, if 0 no fillet radii are applied, no leg slopes area applied, if 1 all details are applied
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.SimplifyFaceCountThreshHold">
            <summary>
            If this number is greater than 0, any faceted meshes will be simplified if the number of faces exceeds the threshold
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.ShortestEdgeLength">
            <summary>
            If the SimplifyFaceCountThreshHold is greater than 0, this is the minimum length of any edge in a face in millimetres, default is 10mm
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.PrecisionBoolean">
            <summary>
            Precision used for Boolean solid geometry operations, default 0.001mm
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.PrecisionBooleanMax">
            <summary>
            The maximum Precision used for Boolean solid geometry operations, default 10mm
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.DeflectionTolerance">
            <summary>
            The defection on a curve when triangulating the model
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.AngleToRadiansConversionFactor">
            <summary>
            Convert degrees to radians
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.LengthToMetresConversionFactor">
            <summary>
            Conversion to metres
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.VertexPointDiameter">
            <summary>
            Used to display a vertex this is the diameter that will be used to auto-generate a geometric representation of a topological vertex
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.MaxBRepSewFaceCount">
            <summary>
            The maximum number of faces to sew and check the result is a valid BREP, face sets with more than this number of faces will be processed as read from the model
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.Precision">
            <summary>
            The  normal tolerance under which two given points are still assumed to be identical
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.PrecisionMax">
            <summary>
            Returns the value for one metre in the units of the model
            </summary>
            /// <summary>
            The  maximum tolerance under which two given points are still assumed to be identical
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.Rounding">
            <summary>
            The number of decimal places to round a number to in order to truncate distances, not to be confused with precision, this is mostly for hashing and reporting, 
            precision determines if two points are the same. NB this must be less that the precision for booleans
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.OneMilliMetre">
            <summary>
            Returns the value for one millimetre in the units of the model
            </summary>
        </member>
        <member name="P:Xbim.Common.XbimModelFactors.DeflectionAngle">
            <summary>
            The min angle used when meshing shapes, works with DeflectionTolerance to set the resolution for linearizing edges, default = 0.5
            </summary>
        </member>
        <member name="P:Xbim.Common.IPersistEntity.EntityLabel">
            <summary>
            Entity Label is an identifier unique inside one IModel. It can't be changed as other objects rely on it.
            </summary>
        </member>
        <member name="P:Xbim.Common.IPersistEntity.Model">
            <summary>
            Model which contains this entity. No entity can exist outside of a IModel
            </summary>
        </member>
        <member name="P:Xbim.Common.IPersistEntity.Activated">
            <summary>
            Some implementations of IModel may implement lazy loading when internal data of
            the entity is only loaded when needed. This flag is used by entity itself and possibly
            by IModel for performance optimization.
            </summary>
        </member>
        <member name="P:Xbim.Common.IPersistEntity.ExpressType">
            <summary>
            Cached reflection information for this type of object
            </summary>
        </member>
        <member name="E:Xbim.Common.ITransaction.EntityChanged">
            <summary>
            This event should be fired after entity is changed
            </summary>
        </member>
        <member name="E:Xbim.Common.ITransaction.EntityChanging">
            <summary>
            This event should be fired before entity is changed.
            </summary>
        </member>
        <member name="M:Xbim.Common.XbimExtensions.StringExtensions.LevenshteinDistance(System.String,System.String)">
            <summary>
            Compute Levenshtein distance. Code origin: http://stackoverflow.com/questions/6944056/c-sharp-compare-string-similarity
            </summary>
            <param name="s">String 1</param>
            <param name="t">String 2</param>
            <returns>Distance between the two strings.
            The larger the number, the bigger the difference.
            </returns>
        </member>
        <member name="T:Xbim.Common.Enumerations.ValidationFlags">
            <summary>
              Set the level of the Validation, multiple flags can be set
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.ValidationFlags.None">
            <summary>
              Executes no validation checks
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.ValidationFlags.All">
            <summary>
              Checks all validation levels
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.ValidationFlags.Properties">
            <summary>
              Checks that all property values meet their Ifc Schema Constraints
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.ValidationFlags.Inverses">
            <summary>
              Checks all inverse realationships meet their Ifc Schema Constraints
            </summary>
        </member>
        <member name="T:Xbim.Common.Enumerations.XbimRepresentationContextType">
            <summary>
            </summary>
        </member>
        <member name="T:Xbim.Common.Enumerations.XbimRepresentationIdentifierType">
            <summary>
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.Curve2D">
            <summary>
              2 dimensional curves
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.GeometricSet">
            <summary>
              Points, curves, surfaces (2 or 3 dimensional)
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.GeometricCurveSet">
            <summary>
              Points, curves (2 or 3 dimensional)
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.SurfaceModel">
            <summary>
              Face based and shell based surface model
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.SolidModel">
            <summary>
              Swept solid, Boolean results and Brep bodies
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.SweptSolid">
            <summary>
              Swept area solids, by extrusion and revolution
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.Brep">
            <summary>
              Faceted Brep's with and without voids
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.CSG">
            <summary>
              Boolean results of operations between solid models, half spaces and Boolean results
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.Clipping">
            <summary>
              Boolean differences between swept area solids, half spaces and Boolean results
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.AdvancedSweptSolid">
            <summary>
              Swept area solids created by sweeping a profile along a directrix
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.BoundingBox">
            <summary>
              Simplistic 3D representation by a bounding box
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.SectionedSpine">
            <summary>
              cross section based representation of a spine curve and planar cross sections.
              It can represent a surface or a solid and the interpolations of the between the cross sections is not defined
            </summary>
        </member>
        <member name="F:Xbim.Common.Enumerations.XbimRepresentationType.MappedRepresentation">
            <summary>
              representation based on mapped item(s), referring to a representation map. 
              Note: it can be seen as an inserted block reference. 
              The shape representation of the mapped item has a representation type declaring the type of its representation items.
            </summary>
        </member>
        <member name="T:Xbim.Common.ProjectUnits">
            <summary>
            Could do with Imperial :-)
            </summary>
        </member>
        <member name="T:Xbim.Common.XbimInstanceHandle">
            <summary>
            A lightweight structure for obtaining a handle to an Ifc Instance, the instance is not loaded into memory unless the GetInstance function is called
            IfcInstanceHandle are specific to the model they were generated from
            </summary>
        </member>
        <member name="T:Xbim.Common.XbimInstanceHandleMap">
            <summary>
            A class for holding mappings between instances in one model and instances in another model
            </summary>
        </member>
        <member name="T:System.Collections.Generic.XbimMultiValueDictionary`2">
            <summary>
            A MultiValueDictionary can be viewed as a <see cref="T:System.Collections.IDictionary" /> that allows multiple 
            values for any given unique key. While the MultiValueDictionary API is 
            mostly the same as that of a regular <see cref="T:System.Collections.IDictionary" />, there is a distinction
            in that getting the value for a key returns a <see cref="T:System.Collections.Generic.ICollection`1" /> of values
            rather than a single value associated with that key. Additionally, 
            there is functionality to allow adding or removing more than a single
            value at once. 
            
            The MultiValueDictionary can also be viewed as a IReadOnlyDictionary&lt;TKey,ICollection&lt;TValue&gt;t&gt;
            where the <see cref="T:System.Collections.Generic.ICollection`1" /> is abstracted from the view of the programmer.
            
            For a read-only MultiValueDictionary, see <see cref="T:System.Linq.ILookup`2" />.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.XbimMultiValueDictionary`2.dictionary">
            <summary>
            The private dictionary that this class effectively wraps around
            </summary>
        </member>
        <member name="F:System.Collections.Generic.XbimMultiValueDictionary`2.NewCollectionFactory">
            <summary>
            The function to construct a new <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:System.Collections.Generic.XbimMultiValueDictionary`2.version">
            <summary>
            The current version of this MultiValueDictionary used to determine MultiValueDictionary modification
            during enumeration
            </summary>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class that is 
            empty, has the specified initial capacity, and uses the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            for <typeparamref name="TKey"/>.
            </summary>
            <param name="capacity">Initial number of keys that the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> will allocate space for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity must be >= 0</exception>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class 
            that is empty, has the default initial capacity, and uses the 
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class 
            that is empty, has the specified initial capacity, and uses the 
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="capacity">Initial number of keys that the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> will allocate space for</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, ICollection&lt;TValue&gt;&gt;&gt; and uses the 
            default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            </summary>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, ICollection&lt;TValue&gt;&gt;&gt; and uses the 
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Int32)">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> will allocate space for</param>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> will allocate space for</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, ICollection&lt;TValue&gt;&gt;&gt;
            and uses the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, ICollection&lt;TValue&gt;&gt;&gt;
            and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />.</param>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Int32,System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> will allocate space for</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Collections.Generic.IEqualityComparer{`0},System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />.</param> 
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> will allocate space for</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}}},System.Func{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, ICollection&lt;TValue&gt;&gt;&gt;
            and uses the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}}},System.Collections.Generic.IEqualityComparer{`0},System.Func{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, ICollection&lt;TValue&gt;&gt;&gt;
            and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified <typeparamref name="TKey"/> and <typeparamref name="TValue"/> to the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to add.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            Unlike the Add for <see cref="T:System.Collections.IDictionary" />, the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> Add will not
            throw any exceptions. If the given <typeparamref name="TKey"/> is already in the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>,
            then <typeparamref name="TValue"/> will be added to <see cref="T:System.Collections.Generic.ICollection`1"/> associated with <paramref name="key"/>
            </remarks>
            <remarks>
            A call to this Add method will always invalidate any currently running enumeration regardless
            of whether the Add method actually modified the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2" />.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a number of key-value pairs to this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>, where
            the key for each value is <paramref name="key"/>, and the value for a pair
            is an element from <paramref name="values"/>
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of all entries to add</param>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of values to add</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> and <paramref name="values"/> must be non-null</exception>
            <remarks>
            A call to this AddRange method will always invalidate any currently running enumeration regardless
            of whether the AddRange method actually modified the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Remove(`0)">
            <summary>
            Removes every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/>
            from the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to remove</param>
            <returns><c>true</c> if the removal was successful; otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Remove(`0,`1)">
            <summary>
            Removes the first instance (if any) of the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> 
            pair from this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>. 
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to remove</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to remove</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <returns><c>true</c> if the removal was successful; otherwise <c>false</c></returns>
            <remarks>
            If the <typeparamref name="TValue"/> being removed is the last one associated with its <typeparamref name="TKey"/>, then that 
            <typeparamref name="TKey"/> will be removed from the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> and its 
            associated <see cref="T:System.Collections.Generic.ICollection`1"/> will be freed as if a call to <see cref="M:System.Collections.Generic.XbimMultiValueDictionary`2.Remove(`0)"/>
            had been made.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Contains(`0,`1)">
            <summary>
            Determines if the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> 
            pair exists within this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element.</param>
            <returns><c>true</c> if found; otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.ContainsValue(`1)">
            <summary>
            Determines if the given <typeparamref name="TValue"/> exists within this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </summary>
            <param name="value">A <typeparamref name="TValue"/> to search the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> for</param>
            <returns><c>true</c> if the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> contains the <paramref name="value"/>; otherwise <c>false</c></returns>      
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Clear">
            <summary>
            Removes every <typeparamref name="TKey"/> and <typeparamref name="TValue"/> from this 
            <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the given <typeparamref name="TKey"/> exists within this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> and has
            at least one <typeparamref name="TValue"/> associated with it.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> to search the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> for</param>
            <returns><c>true</c> if the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> contains the requested <typeparamref name="TKey"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="P:System.Collections.Generic.XbimMultiValueDictionary`2.Keys">
            <summary>
            Gets each <typeparamref name="TKey"/> in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> that
            has one or more associated <typeparamref name="TValue"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing each <typeparamref name="TKey"/> 
            in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> that has one or more associated 
            <typeparamref name="TValue"/>.
            </value>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            Attempts to get the <typeparamref name="TValue"/> associated with the given
            <typeparamref name="TKey"/> and place it into <paramref name="value"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to retrieve</param>
            <param name="value">
            When this method returns, contains the <typeparamref name="TValue"/> associated with the specified
            <typeparamref name="TKey"/> if it is found; otherwise contains the default value of <typeparamref name="TValue"/>.
            </param>
            <returns>
            <c>true</c> if the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> contains an element with the specified 
            <typeparamref name="TKey"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="P:System.Collections.Generic.XbimMultiValueDictionary`2.Values">
            <summary>
            Gets an enumerable of <see cref="T:System.Collections.Generic.ICollection`1"/> from this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>,
            where each <see cref="T:System.Collections.Generic.ICollection`1" /> is the collection of every <typeparamref name="TValue"/> associated
            with a <typeparamref name="TKey"/> present in the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>. 
            </summary>
            <value>An IEnumerable of each <see cref="T:System.Collections.Generic.ICollection`1"/> in this 
            <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/></value>
        </member>
        <member name="P:System.Collections.Generic.XbimMultiValueDictionary`2.Item(`0)">
            <summary>
            Get every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/>. If 
            <paramref name="key"/> is not found in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>, will 
            throw a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to retrieve.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> does not have any associated 
            <typeparamref name="TValue"/>s in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.</exception>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing every <typeparamref name="TValue"/>
            associated with <paramref name="key"/>.
            </value>
            <remarks>
            Note that the <see cref="T:System.Collections.Generic.ICollection`1"/> returned will change alongside any changes 
            to the <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/> 
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.XbimMultiValueDictionary`2.Count">
            <summary>
            Returns the number of <typeparamref name="TKey"/>s with one or more associated <typeparamref name="TValue"/>
            in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </summary>
            <value>The number of <typeparamref name="TKey"/>s in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.</value>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.GetEnumerator">
            <summary>
            Get an Enumerator over the <typeparamref name="TKey"/>-<see cref="T:System.Collections.Generic.ICollection`1"/>
            pairs in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.
            </summary>
            <returns>an Enumerator over the <typeparamref name="TKey"/>-<see cref="T:System.Collections.Generic.ICollection`1"/>
            pairs in this <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.XbimMultiValueDictionary`2.Enumerator">
            <summary>
            The Enumerator class for a <see cref="T:System.Collections.Generic.XbimMultiValueDictionary`2"/>
            that iterates over <typeparamref name="TKey"/>-<see cref="T:System.Collections.Generic.ICollection`1"/>
            pairs.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Enumerator.#ctor(System.Collections.Generic.XbimMultiValueDictionary{`0,`1})">
            <summary>
            Constructor for the enumerator
            </summary>
            <param name="_xbimMultiValueDictionary">A MultiValueDictionary to iterate over</param>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:System.Collections.Generic.XbimMultiValueDictionary`2.Enumerator.Dispose">
            <summary>
            Frees resources associated with this Enumerator
            </summary>
        </member>
        <member name="T:System.Collections.Generic.XbimMultiValueDictionary`2.InnerCollectionView">
            <summary>
            An inner class that functions as a view of an ICollection within a MultiValueDictionary
            </summary>
        </member>
    </members>
</doc>
